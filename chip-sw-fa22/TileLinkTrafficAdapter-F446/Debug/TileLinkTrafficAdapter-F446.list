
TileLinkTrafficAdapter-F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005954  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005b18  08005b18  00015b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b38  08005b38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b40  08005b40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b44  08005b44  00015b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000010  08005b54  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08005b54  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101fc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002302  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00032540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  000332d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234b9  00000000  00000000  00033f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113fc  00000000  00000000  00057451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d23b3  00000000  00000000  0006884d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ac00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000389c  00000000  00000000  0013ac50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005b00 	.word	0x08005b00

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08005b00 	.word	0x08005b00

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_IC_CaptureCallback>:

TileLinkController tl;

char str[128];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  TL_update(&tl);
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <HAL_TIM_IC_CaptureCallback+0x18>)
 8000512:	f000 fd1b 	bl	8000f4c <TL_update>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000030 	.word	0x20000030

08000524 <HAL_UARTEx_RxEventCallback>:
uint8_t serial_rx_buffer[SERIAL_BUFFER_SIZE];
uint8_t serial_tx_buffer[SERIAL_BUFFER_SIZE];

uint8_t frame_pending = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	8079      	strh	r1, [r7, #2]
  if (huart == &huart2) {
 800052e:	6879      	ldr	r1, [r7, #4]
 8000530:	481f      	ldr	r0, [pc, #124]	; (80005b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000532:	4281      	cmp	r1, r0
 8000534:	d133      	bne.n	800059e <HAL_UARTEx_RxEventCallback+0x7a>

    tl.tx_frame.chanid  = *(serial_rx_buffer);
 8000536:	491f      	ldr	r1, [pc, #124]	; (80005b4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000538:	7808      	ldrb	r0, [r1, #0]
 800053a:	491f      	ldr	r1, [pc, #124]	; (80005b8 <HAL_UARTEx_RxEventCallback+0x94>)
 800053c:	7008      	strb	r0, [r1, #0]
    tl.tx_frame.opcode  = (*(serial_rx_buffer + 1)) & 0b111;
 800053e:	491d      	ldr	r1, [pc, #116]	; (80005b4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000540:	7849      	ldrb	r1, [r1, #1]
 8000542:	f001 0107 	and.w	r1, r1, #7
 8000546:	b2c8      	uxtb	r0, r1
 8000548:	491b      	ldr	r1, [pc, #108]	; (80005b8 <HAL_UARTEx_RxEventCallback+0x94>)
 800054a:	7048      	strb	r0, [r1, #1]
    tl.tx_frame.param   = (*(serial_rx_buffer + 1)) >> 4;
 800054c:	4919      	ldr	r1, [pc, #100]	; (80005b4 <HAL_UARTEx_RxEventCallback+0x90>)
 800054e:	7849      	ldrb	r1, [r1, #1]
 8000550:	0909      	lsrs	r1, r1, #4
 8000552:	b2c8      	uxtb	r0, r1
 8000554:	4918      	ldr	r1, [pc, #96]	; (80005b8 <HAL_UARTEx_RxEventCallback+0x94>)
 8000556:	7088      	strb	r0, [r1, #2]
    tl.tx_frame.size    = *(serial_rx_buffer + 2);
 8000558:	4916      	ldr	r1, [pc, #88]	; (80005b4 <HAL_UARTEx_RxEventCallback+0x90>)
 800055a:	7888      	ldrb	r0, [r1, #2]
 800055c:	4916      	ldr	r1, [pc, #88]	; (80005b8 <HAL_UARTEx_RxEventCallback+0x94>)
 800055e:	70c8      	strb	r0, [r1, #3]
    tl.tx_frame.source  = 0;
 8000560:	4915      	ldr	r1, [pc, #84]	; (80005b8 <HAL_UARTEx_RxEventCallback+0x94>)
 8000562:	2000      	movs	r0, #0
 8000564:	7108      	strb	r0, [r1, #4]
    tl.tx_frame.address = *(uint32_t *)(serial_rx_buffer + 4);
 8000566:	4913      	ldr	r1, [pc, #76]	; (80005b4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000568:	6849      	ldr	r1, [r1, #4]
 800056a:	4813      	ldr	r0, [pc, #76]	; (80005b8 <HAL_UARTEx_RxEventCallback+0x94>)
 800056c:	6081      	str	r1, [r0, #8]
    tl.tx_frame.data    = *(uint32_t *)(serial_rx_buffer + 8);
 800056e:	4913      	ldr	r1, [pc, #76]	; (80005bc <HAL_UARTEx_RxEventCallback+0x98>)
 8000570:	6809      	ldr	r1, [r1, #0]
 8000572:	2000      	movs	r0, #0
 8000574:	460a      	mov	r2, r1
 8000576:	4603      	mov	r3, r0
 8000578:	490f      	ldr	r1, [pc, #60]	; (80005b8 <HAL_UARTEx_RxEventCallback+0x94>)
 800057a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    tl.tx_frame.corrupt = (*(serial_rx_buffer + 1) >> 7) & 0b1;
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000580:	785b      	ldrb	r3, [r3, #1]
 8000582:	09db      	lsrs	r3, r3, #7
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_UARTEx_RxEventCallback+0x94>)
 8000588:	761a      	strb	r2, [r3, #24]
    tl.tx_frame.mask    = *(serial_rx_buffer + 3);
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <HAL_UARTEx_RxEventCallback+0x90>)
 800058c:	78da      	ldrb	r2, [r3, #3]
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_UARTEx_RxEventCallback+0x94>)
 8000590:	765a      	strb	r2, [r3, #25]
    tl.tx_frame.last    = 1;
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_UARTEx_RxEventCallback+0x94>)
 8000594:	2201      	movs	r2, #1
 8000596:	769a      	strb	r2, [r3, #26]

    frame_pending = 1;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <HAL_UARTEx_RxEventCallback+0x9c>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
  }

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, serial_rx_buffer, 20);
 800059e:	2214      	movs	r2, #20
 80005a0:	4904      	ldr	r1, [pc, #16]	; (80005b4 <HAL_UARTEx_RxEventCallback+0x90>)
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 80005a4:	f004 f92b 	bl	80047fe <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000394 	.word	0x20000394
 80005b4:	20000280 	.word	0x20000280
 80005b8:	20000030 	.word	0x20000030
 80005bc:	20000288 	.word	0x20000288
 80005c0:	20000300 	.word	0x20000300

080005c4 <APP_init>:

void APP_setLED(uint8_t state) {
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
}

void APP_init() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005c8:	2100      	movs	r1, #0
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <APP_init+0x24>)
 80005cc:	f002 fd86 	bl	80030dc <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80005d0:	2100      	movs	r1, #0
 80005d2:	4806      	ldr	r0, [pc, #24]	; (80005ec <APP_init+0x28>)
 80005d4:	f002 fe9a 	bl	800330c <HAL_TIM_IC_Start_IT>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, serial_rx_buffer, 20);
 80005d8:	2214      	movs	r2, #20
 80005da:	4905      	ldr	r1, [pc, #20]	; (80005f0 <APP_init+0x2c>)
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <APP_init+0x30>)
 80005de:	f004 f90e 	bl	80047fe <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000304 	.word	0x20000304
 80005ec:	2000034c 	.word	0x2000034c
 80005f0:	20000280 	.word	0x20000280
 80005f4:	20000394 	.word	0x20000394

080005f8 <APP_main>:


void APP_main() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  if (frame_pending) {
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <APP_main+0x9c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d044      	beq.n	800068e <APP_main+0x96>
    TL_transmit(&tl);
 8000604:	4824      	ldr	r0, [pc, #144]	; (8000698 <APP_main+0xa0>)
 8000606:	f000 ff74 	bl	80014f2 <TL_transmit>
    while (!tl.rx_finished) {}
 800060a:	bf00      	nop
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <APP_main+0xa0>)
 800060e:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0fa      	beq.n	800060c <APP_main+0x14>
    TL_deserialize(&tl.rx_frame);
 8000616:	4821      	ldr	r0, [pc, #132]	; (800069c <APP_main+0xa4>)
 8000618:	f000 fe26 	bl	8001268 <TL_deserialize>
    frame_pending = 0;
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <APP_main+0x9c>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]

    *(serial_tx_buffer) = tl.rx_frame.chanid;
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <APP_main+0xa0>)
 8000624:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <APP_main+0xa8>)
 800062a:	701a      	strb	r2, [r3, #0]
    *(serial_tx_buffer + 1) = (tl.rx_frame.corrupt << 7) | (tl.rx_frame.param << 4) | tl.rx_frame.opcode;
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <APP_main+0xa0>)
 800062e:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8000632:	01db      	lsls	r3, r3, #7
 8000634:	b25a      	sxtb	r2, r3
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <APP_main+0xa0>)
 8000638:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800063c:	011b      	lsls	r3, r3, #4
 800063e:	b25b      	sxtb	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	b25a      	sxtb	r2, r3
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <APP_main+0xa0>)
 8000646:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800064a:	b25b      	sxtb	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b25b      	sxtb	r3, r3
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <APP_main+0xa8>)
 8000654:	705a      	strb	r2, [r3, #1]
    *(serial_tx_buffer + 2) = tl.rx_frame.size;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <APP_main+0xa0>)
 8000658:	f893 2123 	ldrb.w	r2, [r3, #291]	; 0x123
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <APP_main+0xa8>)
 800065e:	709a      	strb	r2, [r3, #2]
    *(serial_tx_buffer + 3) = tl.rx_frame.mask;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <APP_main+0xa0>)
 8000662:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <APP_main+0xa8>)
 8000668:	70da      	strb	r2, [r3, #3]
    *(uint32_t *)(serial_tx_buffer + 4) = tl.rx_frame.address;
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <APP_main+0xac>)
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <APP_main+0xa0>)
 800066e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000672:	6013      	str	r3, [r2, #0]
    *(uint32_t *)(serial_tx_buffer + 8) = tl.rx_frame.data;
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <APP_main+0xa0>)
 8000676:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800067a:	490b      	ldr	r1, [pc, #44]	; (80006a8 <APP_main+0xb0>)
 800067c:	4613      	mov	r3, r2
 800067e:	600b      	str	r3, [r1, #0]

    HAL_UART_Transmit(&huart2, serial_tx_buffer, 12, 1000);
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	220c      	movs	r2, #12
 8000686:	4906      	ldr	r1, [pc, #24]	; (80006a0 <APP_main+0xa8>)
 8000688:	4808      	ldr	r0, [pc, #32]	; (80006ac <APP_main+0xb4>)
 800068a:	f004 f826 	bl	80046da <HAL_UART_Transmit>
  }
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000300 	.word	0x20000300
 8000698:	20000030 	.word	0x20000030
 800069c:	20000150 	.word	0x20000150
 80006a0:	200002c0 	.word	0x200002c0
 80006a4:	200002c4 	.word	0x200002c4
 80006a8:	200002c8 	.word	0x200002c8
 80006ac:	20000394 	.word	0x20000394

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 ff6c 	bl	8001590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f810 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f000 f9c8 	bl	8000a50 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c0:	f000 f99e 	bl	8000a00 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006c4:	f000 f972 	bl	80009ac <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80006c8:	f000 f91c 	bl	8000904 <MX_TIM4_Init>
  MX_TIM1_Init();
 80006cc:	f000 f878 	bl	80007c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 80006d0:	f7ff ff78 	bl	80005c4 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 80006d4:	f7ff ff90 	bl	80005f8 <APP_main>
 80006d8:	e7fc      	b.n	80006d4 <main+0x24>
	...

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2234      	movs	r2, #52	; 0x34
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 fa00 	bl	8005af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <SystemClock_Config+0xdc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <SystemClock_Config+0xdc>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <SystemClock_Config+0xdc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <SystemClock_Config+0xe0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a25      	ldr	r2, [pc, #148]	; (80007bc <SystemClock_Config+0xe0>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <SystemClock_Config+0xe0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800074c:	2308      	movs	r3, #8
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000750:	23b4      	movs	r3, #180	; 0xb4
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4618      	mov	r0, r3
 8000766:	f002 f973 	bl	8002a50 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000770:	f000 f9fa 	bl	8000b68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000774:	f001 fe58 	bl	8002428 <HAL_PWREx_EnableOverDrive>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800077e:	f000 f9f3 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2302      	movs	r3, #2
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2105      	movs	r1, #5
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fe91 	bl	80024c8 <HAL_RCC_ClockConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007ac:	f000 f9dc 	bl	8000b68 <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3750      	adds	r7, #80	; 0x50
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b096      	sub	sp, #88	; 0x58
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2220      	movs	r2, #32
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f005 f979 	bl	8005af0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007fe:	4b3f      	ldr	r3, [pc, #252]	; (80008fc <MX_TIM1_Init+0x13c>)
 8000800:	4a3f      	ldr	r2, [pc, #252]	; (8000900 <MX_TIM1_Init+0x140>)
 8000802:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8000804:	4b3d      	ldr	r3, [pc, #244]	; (80008fc <MX_TIM1_Init+0x13c>)
 8000806:	229f      	movs	r2, #159	; 0x9f
 8000808:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b3c      	ldr	r3, [pc, #240]	; (80008fc <MX_TIM1_Init+0x13c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000810:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <MX_TIM1_Init+0x13c>)
 8000812:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000816:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b38      	ldr	r3, [pc, #224]	; (80008fc <MX_TIM1_Init+0x13c>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800081e:	4b37      	ldr	r3, [pc, #220]	; (80008fc <MX_TIM1_Init+0x13c>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b35      	ldr	r3, [pc, #212]	; (80008fc <MX_TIM1_Init+0x13c>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800082a:	4834      	ldr	r0, [pc, #208]	; (80008fc <MX_TIM1_Init+0x13c>)
 800082c:	f002 fbae 	bl	8002f8c <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000836:	f000 f997 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000840:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000844:	4619      	mov	r1, r3
 8000846:	482d      	ldr	r0, [pc, #180]	; (80008fc <MX_TIM1_Init+0x13c>)
 8000848:	f003 f8ee 	bl	8003a28 <HAL_TIM_ConfigClockSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000852:	f000 f989 	bl	8000b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000856:	4829      	ldr	r0, [pc, #164]	; (80008fc <MX_TIM1_Init+0x13c>)
 8000858:	f002 fbe7 	bl	800302a <HAL_TIM_PWM_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000862:	f000 f981 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800086e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000872:	4619      	mov	r1, r3
 8000874:	4821      	ldr	r0, [pc, #132]	; (80008fc <MX_TIM1_Init+0x13c>)
 8000876:	f003 fe01 	bl	800447c <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000880:	f000 f972 	bl	8000b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000884:	2370      	movs	r3, #112	; 0x70
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8000888:	f240 13f3 	movw	r3, #499	; 0x1f3
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088e:	2300      	movs	r3, #0
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000892:	2300      	movs	r3, #0
 8000894:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	2200      	movs	r2, #0
 80008a8:	4619      	mov	r1, r3
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_TIM1_Init+0x13c>)
 80008ac:	f002 fffa 	bl	80038a4 <HAL_TIM_PWM_ConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80008b6:	f000 f957 	bl	8000b68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	4807      	ldr	r0, [pc, #28]	; (80008fc <MX_TIM1_Init+0x13c>)
 80008de:	f003 fe49 	bl	8004574 <HAL_TIMEx_ConfigBreakDeadTime>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80008e8:	f000 f93e 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <MX_TIM1_Init+0x13c>)
 80008ee:	f000 f9db 	bl	8000ca8 <HAL_TIM_MspPostInit>

}
 80008f2:	bf00      	nop
 80008f4:	3758      	adds	r7, #88	; 0x58
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000304 	.word	0x20000304
 8000900:	40010000 	.word	0x40010000

08000904 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_TIM4_Init+0xa0>)
 8000922:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <MX_TIM4_Init+0xa4>)
 8000924:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_TIM4_Init+0xa0>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_TIM4_Init+0xa0>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_TIM4_Init+0xa0>)
 8000934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000938:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_TIM4_Init+0xa0>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_TIM4_Init+0xa0>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000946:	4817      	ldr	r0, [pc, #92]	; (80009a4 <MX_TIM4_Init+0xa0>)
 8000948:	f002 fc90 	bl	800326c <HAL_TIM_IC_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000952:	f000 f909 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	4619      	mov	r1, r3
 8000964:	480f      	ldr	r0, [pc, #60]	; (80009a4 <MX_TIM4_Init+0xa0>)
 8000966:	f003 fd89 	bl	800447c <HAL_TIMEx_MasterConfigSynchronization>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000970:	f000 f8fa 	bl	8000b68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000974:	2300      	movs	r3, #0
 8000976:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000978:	2301      	movs	r3, #1
 800097a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <MX_TIM4_Init+0xa0>)
 800098c:	f002 feee 	bl	800376c <HAL_TIM_IC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000996:	f000 f8e7 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000034c 	.word	0x2000034c
 80009a8:	40000800 	.word	0x40000800

080009ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART2_UART_Init+0x48>)
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_USART2_UART_Init+0x48>)
 80009b8:	4a10      	ldr	r2, [pc, #64]	; (80009fc <MX_USART2_UART_Init+0x50>)
 80009ba:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <MX_USART2_UART_Init+0x48>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART2_UART_Init+0x48>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <MX_USART2_UART_Init+0x48>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART2_UART_Init+0x48>)
 80009d0:	220c      	movs	r2, #12
 80009d2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <MX_USART2_UART_Init+0x48>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART2_UART_Init+0x48>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_USART2_UART_Init+0x48>)
 80009e2:	f003 fe2d 	bl	8004640 <HAL_UART_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80009ec:	f000 f8bc 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000394 	.word	0x20000394
 80009f8:	40004400 	.word	0x40004400
 80009fc:	001e8480 	.word	0x001e8480

08000a00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_DMA_Init+0x4c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <MX_DMA_Init+0x4c>)
 8000a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_DMA_Init+0x4c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2010      	movs	r0, #16
 8000a28:	f000 feff 	bl	800182a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a2c:	2010      	movs	r0, #16
 8000a2e:	f000 ff18 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2011      	movs	r0, #17
 8000a38:	f000 fef7 	bl	800182a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a3c:	2011      	movs	r0, #17
 8000a3e:	f000 ff10 	bl	8001862 <HAL_NVIC_EnableIRQ>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b3b      	ldr	r3, [pc, #236]	; (8000b58 <MX_GPIO_Init+0x108>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a3a      	ldr	r2, [pc, #232]	; (8000b58 <MX_GPIO_Init+0x108>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b38      	ldr	r3, [pc, #224]	; (8000b58 <MX_GPIO_Init+0x108>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <MX_GPIO_Init+0x108>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a33      	ldr	r2, [pc, #204]	; (8000b58 <MX_GPIO_Init+0x108>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <MX_GPIO_Init+0x108>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <MX_GPIO_Init+0x108>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a2c      	ldr	r2, [pc, #176]	; (8000b58 <MX_GPIO_Init+0x108>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <MX_GPIO_Init+0x108>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2103      	movs	r1, #3
 8000abe:	4827      	ldr	r0, [pc, #156]	; (8000b5c <MX_GPIO_Init+0x10c>)
 8000ac0:	f001 fc98 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL_MISO_Ready_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2121      	movs	r1, #33	; 0x21
 8000ac8:	4825      	ldr	r0, [pc, #148]	; (8000b60 <MX_GPIO_Init+0x110>)
 8000aca:	f001 fc93 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481e      	ldr	r0, [pc, #120]	; (8000b5c <MX_GPIO_Init+0x10c>)
 8000ae4:	f001 fada 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MOSI_Data_Pin TL_MOSI_Valid_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	4817      	ldr	r0, [pc, #92]	; (8000b5c <MX_GPIO_Init+0x10c>)
 8000b00:	f001 facc 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Ready_Pin PA5 */
  GPIO_InitStruct.Pin = TL_MISO_Ready_Pin|GPIO_PIN_5;
 8000b04:	2321      	movs	r3, #33	; 0x21
 8000b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4811      	ldr	r0, [pc, #68]	; (8000b60 <MX_GPIO_Init+0x110>)
 8000b1c:	f001 fabe 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Valid_Pin TL_MISO_Data_Pin */
  GPIO_InitStruct.Pin = TL_MISO_Valid_Pin|TL_MISO_Data_Pin;
 8000b20:	2312      	movs	r3, #18
 8000b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	480b      	ldr	r0, [pc, #44]	; (8000b60 <MX_GPIO_Init+0x110>)
 8000b34:	f001 fab2 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_MOSI_Ready_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Ready_Pin;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TL_MOSI_Ready_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <MX_GPIO_Init+0x114>)
 8000b4c:	f001 faa6 	bl	800209c <HAL_GPIO_Init>

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020400 	.word	0x40020400

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <HAL_TIM_Base_MspInit+0x3c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d10d      	bne.n	8000bf2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_TIM_Base_MspInit+0x40>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <HAL_TIM_Base_MspInit+0x40>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <HAL_TIM_Base_MspInit+0x40>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40010000 	.word	0x40010000
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <HAL_TIM_IC_MspInit+0x94>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d133      	bne.n	8000c92 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <HAL_TIM_IC_MspInit+0x98>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <HAL_TIM_IC_MspInit+0x98>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_TIM_IC_MspInit+0x98>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_TIM_IC_MspInit+0x98>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_TIM_IC_MspInit+0x98>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_TIM_IC_MspInit+0x98>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c72:	2302      	movs	r3, #2
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <HAL_TIM_IC_MspInit+0x9c>)
 8000c7e:	f001 fa0d 	bl	800209c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	201e      	movs	r0, #30
 8000c88:	f000 fdcf 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c8c:	201e      	movs	r0, #30
 8000c8e:	f000 fde8 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40000800 	.word	0x40000800
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <HAL_TIM_MspPostInit+0x68>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d11e      	bne.n	8000d08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_TIM_MspPostInit+0x6c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_TIM_MspPostInit+0x6c>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_TIM_MspPostInit+0x6c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	4619      	mov	r1, r3
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <HAL_TIM_MspPostInit+0x70>)
 8000d04:	f001 f9ca 	bl	800209c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d08:	bf00      	nop
 8000d0a:	3720      	adds	r7, #32
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40010000 	.word	0x40010000
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a4b      	ldr	r2, [pc, #300]	; (8000e68 <HAL_UART_MspInit+0x14c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	f040 8090 	bne.w	8000e60 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <HAL_UART_MspInit+0x150>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	4a48      	ldr	r2, [pc, #288]	; (8000e6c <HAL_UART_MspInit+0x150>)
 8000d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d50:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <HAL_UART_MspInit+0x150>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <HAL_UART_MspInit+0x150>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a41      	ldr	r2, [pc, #260]	; (8000e6c <HAL_UART_MspInit+0x150>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <HAL_UART_MspInit+0x150>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d78:	230c      	movs	r3, #12
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4837      	ldr	r0, [pc, #220]	; (8000e70 <HAL_UART_MspInit+0x154>)
 8000d94:	f001 f982 	bl	800209c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d98:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <HAL_UART_MspInit+0x158>)
 8000d9a:	4a37      	ldr	r2, [pc, #220]	; (8000e78 <HAL_UART_MspInit+0x15c>)
 8000d9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d9e:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <HAL_UART_MspInit+0x158>)
 8000da0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000da6:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <HAL_UART_MspInit+0x158>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dac:	4b31      	ldr	r3, [pc, #196]	; (8000e74 <HAL_UART_MspInit+0x158>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000db2:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <HAL_UART_MspInit+0x158>)
 8000db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dba:	4b2e      	ldr	r3, [pc, #184]	; (8000e74 <HAL_UART_MspInit+0x158>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc0:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <HAL_UART_MspInit+0x158>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000dc6:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <HAL_UART_MspInit+0x158>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dcc:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <HAL_UART_MspInit+0x158>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd2:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <HAL_UART_MspInit+0x158>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000dd8:	4826      	ldr	r0, [pc, #152]	; (8000e74 <HAL_UART_MspInit+0x158>)
 8000dda:	f000 fd5d 	bl	8001898 <HAL_DMA_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000de4:	f7ff fec0 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <HAL_UART_MspInit+0x158>)
 8000dec:	639a      	str	r2, [r3, #56]	; 0x38
 8000dee:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <HAL_UART_MspInit+0x158>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000df4:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_UART_MspInit+0x160>)
 8000df6:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <HAL_UART_MspInit+0x164>)
 8000df8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <HAL_UART_MspInit+0x160>)
 8000dfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e00:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <HAL_UART_MspInit+0x160>)
 8000e04:	2240      	movs	r2, #64	; 0x40
 8000e06:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <HAL_UART_MspInit+0x160>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_UART_MspInit+0x160>)
 8000e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e14:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <HAL_UART_MspInit+0x160>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_UART_MspInit+0x160>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_UART_MspInit+0x160>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_UART_MspInit+0x160>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_UART_MspInit+0x160>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <HAL_UART_MspInit+0x160>)
 8000e36:	f000 fd2f 	bl	8001898 <HAL_DMA_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000e40:	f7ff fe92 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_UART_MspInit+0x160>)
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34
 8000e4a:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <HAL_UART_MspInit+0x160>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 4, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2104      	movs	r1, #4
 8000e54:	2026      	movs	r0, #38	; 0x26
 8000e56:	f000 fce8 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e5a:	2026      	movs	r0, #38	; 0x26
 8000e5c:	f000 fd01 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40004400 	.word	0x40004400
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	200003d8 	.word	0x200003d8
 8000e78:	40026088 	.word	0x40026088
 8000e7c:	20000438 	.word	0x20000438
 8000e80:	400260a0 	.word	0x400260a0

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 fbb0 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <DMA1_Stream5_IRQHandler+0x10>)
 8000ede:	f000 fe73 	bl	8001bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200003d8 	.word	0x200003d8

08000eec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <DMA1_Stream6_IRQHandler+0x10>)
 8000ef2:	f000 fe69 	bl	8001bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000438 	.word	0x20000438

08000f00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <TIM4_IRQHandler+0x10>)
 8000f06:	f002 fb29 	bl	800355c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000034c 	.word	0x2000034c

08000f14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <USART2_IRQHandler+0x10>)
 8000f1a:	f003 fcd5 	bl	80048c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000394 	.word	0x20000394

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <TL_update>:
 */

#include "tilelink.h"


void TL_update(TileLinkController *tl) {
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if (tl->tx_pending) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d035      	beq.n	8000fca <TL_update+0x7e>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl->tx_frame.buffer[tl->tx_bit_offset]);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8000f64:	461a      	mov	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	7edb      	ldrb	r3, [r3, #27]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4834      	ldr	r0, [pc, #208]	; (8001044 <TL_update+0xf8>)
 8000f72:	f001 fa3f 	bl	80023f4 <HAL_GPIO_WritePin>

    if (tl->tx_bit_offset == 0) {
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d109      	bne.n	8000f94 <TL_update+0x48>
      HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2101      	movs	r1, #1
 8000f84:	4830      	ldr	r0, [pc, #192]	; (8001048 <TL_update+0xfc>)
 8000f86:	f001 fa35 	bl	80023f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 1);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	482d      	ldr	r0, [pc, #180]	; (8001044 <TL_update+0xf8>)
 8000f90:	f001 fa30 	bl	80023f4 <HAL_GPIO_WritePin>
    }


    if (tl->tx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8000f9a:	2b7b      	cmp	r3, #123	; 0x7b
 8000f9c:	d10c      	bne.n	8000fb8 <TL_update+0x6c>
      HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	4828      	ldr	r0, [pc, #160]	; (8001044 <TL_update+0xf8>)
 8000fa4:	f001 fa26 	bl	80023f4 <HAL_GPIO_WritePin>
      tl->tx_pending = 0;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
      tl->tx_finished = 1;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
    }

    tl->tx_bit_offset += 1;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
        tl->rx_finished = 1;
      }
    }
  }
}
 8000fc8:	e038      	b.n	800103c <TL_update+0xf0>
  else if (tl->rx_pending) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f8b3 324a 	ldrh.w	r3, [r3, #586]	; 0x24a
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d033      	beq.n	800103c <TL_update+0xf0>
    if (tl->rx_finished) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <TL_update+0xa4>
      HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4819      	ldr	r0, [pc, #100]	; (8001048 <TL_update+0xfc>)
 8000fe4:	f001 fa06 	bl	80023f4 <HAL_GPIO_WritePin>
      tl->rx_pending = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
    if (HAL_GPIO_ReadPin(TL_MISO_Valid_GPIO_Port, TL_MISO_Valid_Pin) == GPIO_PIN_SET) {
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	4815      	ldr	r0, [pc, #84]	; (8001048 <TL_update+0xfc>)
 8000ff4:	f001 f9e6 	bl	80023c4 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d11e      	bne.n	800103c <TL_update+0xf0>
      tl->rx_frame.buffer[tl->rx_bit_offset] = HAL_GPIO_ReadPin(TL_MISO_Data_GPIO_Port, TL_MISO_Data_Pin);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8001004:	461c      	mov	r4, r3
 8001006:	2110      	movs	r1, #16
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <TL_update+0xfc>)
 800100a:	f001 f9db 	bl	80023c4 <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4423      	add	r3, r4
 8001016:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      tl->rx_bit_offset += 1;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8001020:	3301      	adds	r3, #1
 8001022:	b29a      	uxth	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8001030:	2b7b      	cmp	r3, #123	; 0x7b
 8001032:	d103      	bne.n	800103c <TL_update+0xf0>
        tl->rx_finished = 1;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	40020800 	.word	0x40020800
 8001048:	40020000 	.word	0x40020000

0800104c <TL_serialize>:

void TL_serialize(TileLinkFrame *frame) {
 800104c:	b4f0      	push	{r4, r5, r6, r7}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001054:	2100      	movs	r1, #0
 8001056:	83f9      	strh	r1, [r7, #30]
 8001058:	e011      	b.n	800107e <TL_serialize+0x32>
    frame->buffer[i] = (frame->last >> i) & 0b1;
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	7e89      	ldrb	r1, [r1, #26]
 800105e:	4608      	mov	r0, r1
 8001060:	8bf9      	ldrh	r1, [r7, #30]
 8001062:	fa40 f101 	asr.w	r1, r0, r1
 8001066:	b2c8      	uxtb	r0, r1
 8001068:	8bf9      	ldrh	r1, [r7, #30]
 800106a:	f000 0001 	and.w	r0, r0, #1
 800106e:	b2c4      	uxtb	r4, r0
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	4401      	add	r1, r0
 8001074:	4620      	mov	r0, r4
 8001076:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001078:	8bf9      	ldrh	r1, [r7, #30]
 800107a:	3101      	adds	r1, #1
 800107c:	83f9      	strh	r1, [r7, #30]
 800107e:	8bf9      	ldrh	r1, [r7, #30]
 8001080:	2900      	cmp	r1, #0
 8001082:	d0ea      	beq.n	800105a <TL_serialize+0xe>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8001084:	2100      	movs	r1, #0
 8001086:	83b9      	strh	r1, [r7, #28]
 8001088:	e012      	b.n	80010b0 <TL_serialize+0x64>
    frame->buffer[i+TL_SERDES_LAST_OFFSET] = (frame->mask >> i) & 0b1;
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	7e49      	ldrb	r1, [r1, #25]
 800108e:	4608      	mov	r0, r1
 8001090:	8bb9      	ldrh	r1, [r7, #28]
 8001092:	fa40 f101 	asr.w	r1, r0, r1
 8001096:	b2c8      	uxtb	r0, r1
 8001098:	8bb9      	ldrh	r1, [r7, #28]
 800109a:	3101      	adds	r1, #1
 800109c:	f000 0001 	and.w	r0, r0, #1
 80010a0:	b2c4      	uxtb	r4, r0
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	4401      	add	r1, r0
 80010a6:	4620      	mov	r0, r4
 80010a8:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80010aa:	8bb9      	ldrh	r1, [r7, #28]
 80010ac:	3101      	adds	r1, #1
 80010ae:	83b9      	strh	r1, [r7, #28]
 80010b0:	8bb9      	ldrh	r1, [r7, #28]
 80010b2:	2907      	cmp	r1, #7
 80010b4:	d9e9      	bls.n	800108a <TL_serialize+0x3e>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80010b6:	2100      	movs	r1, #0
 80010b8:	8379      	strh	r1, [r7, #26]
 80010ba:	e012      	b.n	80010e2 <TL_serialize+0x96>
    frame->buffer[i+TL_SERDES_MASK_OFFSET] = (frame->corrupt >> i) & 0b1;
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	7e09      	ldrb	r1, [r1, #24]
 80010c0:	4608      	mov	r0, r1
 80010c2:	8b79      	ldrh	r1, [r7, #26]
 80010c4:	fa40 f101 	asr.w	r1, r0, r1
 80010c8:	b2c8      	uxtb	r0, r1
 80010ca:	8b79      	ldrh	r1, [r7, #26]
 80010cc:	3109      	adds	r1, #9
 80010ce:	f000 0001 	and.w	r0, r0, #1
 80010d2:	b2c4      	uxtb	r4, r0
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	4401      	add	r1, r0
 80010d8:	4620      	mov	r0, r4
 80010da:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80010dc:	8b79      	ldrh	r1, [r7, #26]
 80010de:	3101      	adds	r1, #1
 80010e0:	8379      	strh	r1, [r7, #26]
 80010e2:	8b79      	ldrh	r1, [r7, #26]
 80010e4:	2900      	cmp	r1, #0
 80010e6:	d0e9      	beq.n	80010bc <TL_serialize+0x70>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 80010e8:	2100      	movs	r1, #0
 80010ea:	8339      	strh	r1, [r7, #24]
 80010ec:	e01e      	b.n	800112c <TL_serialize+0xe0>
    frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] = (frame->data >> i) & 0b1;
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80010f4:	8b3c      	ldrh	r4, [r7, #24]
 80010f6:	f1c4 0620 	rsb	r6, r4, #32
 80010fa:	f1a4 0520 	sub.w	r5, r4, #32
 80010fe:	fa20 f204 	lsr.w	r2, r0, r4
 8001102:	fa01 f606 	lsl.w	r6, r1, r6
 8001106:	4332      	orrs	r2, r6
 8001108:	fa21 f505 	lsr.w	r5, r1, r5
 800110c:	432a      	orrs	r2, r5
 800110e:	fa21 f304 	lsr.w	r3, r1, r4
 8001112:	b2d0      	uxtb	r0, r2
 8001114:	8b39      	ldrh	r1, [r7, #24]
 8001116:	310a      	adds	r1, #10
 8001118:	f000 0001 	and.w	r0, r0, #1
 800111c:	b2c4      	uxtb	r4, r0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	4401      	add	r1, r0
 8001122:	4620      	mov	r0, r4
 8001124:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001126:	8b39      	ldrh	r1, [r7, #24]
 8001128:	3101      	adds	r1, #1
 800112a:	8339      	strh	r1, [r7, #24]
 800112c:	8b39      	ldrh	r1, [r7, #24]
 800112e:	293f      	cmp	r1, #63	; 0x3f
 8001130:	d9dd      	bls.n	80010ee <TL_serialize+0xa2>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001132:	2300      	movs	r3, #0
 8001134:	82fb      	strh	r3, [r7, #22]
 8001136:	e011      	b.n	800115c <TL_serialize+0x110>
    frame->buffer[i+TL_SERDES_DATA_OFFSET] = (frame->address >> i) & 0b1;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	8afb      	ldrh	r3, [r7, #22]
 800113e:	fa22 f303 	lsr.w	r3, r2, r3
 8001142:	b2da      	uxtb	r2, r3
 8001144:	8afb      	ldrh	r3, [r7, #22]
 8001146:	334a      	adds	r3, #74	; 0x4a
 8001148:	f002 0201 	and.w	r2, r2, #1
 800114c:	b2d1      	uxtb	r1, r2
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	460a      	mov	r2, r1
 8001154:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001156:	8afb      	ldrh	r3, [r7, #22]
 8001158:	3301      	adds	r3, #1
 800115a:	82fb      	strh	r3, [r7, #22]
 800115c:	8afb      	ldrh	r3, [r7, #22]
 800115e:	2b1f      	cmp	r3, #31
 8001160:	d9ea      	bls.n	8001138 <TL_serialize+0xec>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001162:	2300      	movs	r3, #0
 8001164:	82bb      	strh	r3, [r7, #20]
 8001166:	e012      	b.n	800118e <TL_serialize+0x142>
    frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] = (frame->source >> i) & 0b1;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	791b      	ldrb	r3, [r3, #4]
 800116c:	461a      	mov	r2, r3
 800116e:	8abb      	ldrh	r3, [r7, #20]
 8001170:	fa42 f303 	asr.w	r3, r2, r3
 8001174:	b2da      	uxtb	r2, r3
 8001176:	8abb      	ldrh	r3, [r7, #20]
 8001178:	336a      	adds	r3, #106	; 0x6a
 800117a:	f002 0201 	and.w	r2, r2, #1
 800117e:	b2d1      	uxtb	r1, r2
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	460a      	mov	r2, r1
 8001186:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001188:	8abb      	ldrh	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	82bb      	strh	r3, [r7, #20]
 800118e:	8abb      	ldrh	r3, [r7, #20]
 8001190:	2b03      	cmp	r3, #3
 8001192:	d9e9      	bls.n	8001168 <TL_serialize+0x11c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001194:	2300      	movs	r3, #0
 8001196:	827b      	strh	r3, [r7, #18]
 8001198:	e012      	b.n	80011c0 <TL_serialize+0x174>
    frame->buffer[i+TL_SERDES_SOURCE_OFFSET] = (frame->size >> i) & 0b1;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	78db      	ldrb	r3, [r3, #3]
 800119e:	461a      	mov	r2, r3
 80011a0:	8a7b      	ldrh	r3, [r7, #18]
 80011a2:	fa42 f303 	asr.w	r3, r2, r3
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	8a7b      	ldrh	r3, [r7, #18]
 80011aa:	336e      	adds	r3, #110	; 0x6e
 80011ac:	f002 0201 	and.w	r2, r2, #1
 80011b0:	b2d1      	uxtb	r1, r2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	460a      	mov	r2, r1
 80011b8:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 80011ba:	8a7b      	ldrh	r3, [r7, #18]
 80011bc:	3301      	adds	r3, #1
 80011be:	827b      	strh	r3, [r7, #18]
 80011c0:	8a7b      	ldrh	r3, [r7, #18]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d9e9      	bls.n	800119a <TL_serialize+0x14e>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80011c6:	2300      	movs	r3, #0
 80011c8:	823b      	strh	r3, [r7, #16]
 80011ca:	e012      	b.n	80011f2 <TL_serialize+0x1a6>
    frame->buffer[i+TL_SERDES_SIZE_OFFSET] = (frame->param >> i) & 0b1;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	789b      	ldrb	r3, [r3, #2]
 80011d0:	461a      	mov	r2, r3
 80011d2:	8a3b      	ldrh	r3, [r7, #16]
 80011d4:	fa42 f303 	asr.w	r3, r2, r3
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	8a3b      	ldrh	r3, [r7, #16]
 80011dc:	3372      	adds	r3, #114	; 0x72
 80011de:	f002 0201 	and.w	r2, r2, #1
 80011e2:	b2d1      	uxtb	r1, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4413      	add	r3, r2
 80011e8:	460a      	mov	r2, r1
 80011ea:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80011ec:	8a3b      	ldrh	r3, [r7, #16]
 80011ee:	3301      	adds	r3, #1
 80011f0:	823b      	strh	r3, [r7, #16]
 80011f2:	8a3b      	ldrh	r3, [r7, #16]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d9e9      	bls.n	80011cc <TL_serialize+0x180>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80011f8:	2300      	movs	r3, #0
 80011fa:	81fb      	strh	r3, [r7, #14]
 80011fc:	e012      	b.n	8001224 <TL_serialize+0x1d8>
    frame->buffer[i+TL_SERDES_PARAM_OFFSET] = (frame->opcode >> i) & 0b1;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	785b      	ldrb	r3, [r3, #1]
 8001202:	461a      	mov	r2, r3
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	fa42 f303 	asr.w	r3, r2, r3
 800120a:	b2da      	uxtb	r2, r3
 800120c:	89fb      	ldrh	r3, [r7, #14]
 800120e:	3375      	adds	r3, #117	; 0x75
 8001210:	f002 0201 	and.w	r2, r2, #1
 8001214:	b2d1      	uxtb	r1, r2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	460a      	mov	r2, r1
 800121c:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	3301      	adds	r3, #1
 8001222:	81fb      	strh	r3, [r7, #14]
 8001224:	89fb      	ldrh	r3, [r7, #14]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d9e9      	bls.n	80011fe <TL_serialize+0x1b2>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 800122a:	2300      	movs	r3, #0
 800122c:	81bb      	strh	r3, [r7, #12]
 800122e:	e012      	b.n	8001256 <TL_serialize+0x20a>
    frame->buffer[i+TL_SERDES_OPCODE_OFFSET] = (frame->chanid >> i) & 0b1;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	89bb      	ldrh	r3, [r7, #12]
 8001238:	fa42 f303 	asr.w	r3, r2, r3
 800123c:	b2da      	uxtb	r2, r3
 800123e:	89bb      	ldrh	r3, [r7, #12]
 8001240:	3378      	adds	r3, #120	; 0x78
 8001242:	f002 0201 	and.w	r2, r2, #1
 8001246:	b2d1      	uxtb	r1, r2
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	460a      	mov	r2, r1
 800124e:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8001250:	89bb      	ldrh	r3, [r7, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	81bb      	strh	r3, [r7, #12]
 8001256:	89bb      	ldrh	r3, [r7, #12]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d9e9      	bls.n	8001230 <TL_serialize+0x1e4>
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bcf0      	pop	{r4, r5, r6, r7}
 8001266:	4770      	bx	lr

08001268 <TL_deserialize>:

void TL_deserialize(TileLinkFrame *frame) {
 8001268:	b4f0      	push	{r4, r5, r6, r7}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  frame->chanid = 0;
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	2000      	movs	r0, #0
 8001274:	7008      	strb	r0, [r1, #0]
  frame->opcode = 0;
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	2000      	movs	r0, #0
 800127a:	7048      	strb	r0, [r1, #1]
  frame->param = 0;
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	2000      	movs	r0, #0
 8001280:	7088      	strb	r0, [r1, #2]
  frame->size = 0;
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	2000      	movs	r0, #0
 8001286:	70c8      	strb	r0, [r1, #3]
  frame->source = 0;
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	2000      	movs	r0, #0
 800128c:	7108      	strb	r0, [r1, #4]
  frame->address = 0;
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	2000      	movs	r0, #0
 8001292:	6088      	str	r0, [r1, #8]
  frame->data = 0;
 8001294:	687e      	ldr	r6, [r7, #4]
 8001296:	f04f 0000 	mov.w	r0, #0
 800129a:	f04f 0100 	mov.w	r1, #0
 800129e:	e9c6 0104 	strd	r0, r1, [r6, #16]
  frame->corrupt = 0;
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	2000      	movs	r0, #0
 80012a6:	7608      	strb	r0, [r1, #24]
  frame->mask = 0;
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	2000      	movs	r0, #0
 80012ac:	7648      	strb	r0, [r1, #25]
  frame->last = 0;
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	2000      	movs	r0, #0
 80012b2:	7688      	strb	r0, [r1, #26]

  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80012b4:	2100      	movs	r1, #0
 80012b6:	83f9      	strh	r1, [r7, #30]
 80012b8:	e014      	b.n	80012e4 <TL_deserialize+0x7c>
    frame->last |= ((frame->buffer[i] & 0b1) << i);
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	7e89      	ldrb	r1, [r1, #26]
 80012be:	b248      	sxtb	r0, r1
 80012c0:	8bf9      	ldrh	r1, [r7, #30]
 80012c2:	687e      	ldr	r6, [r7, #4]
 80012c4:	4431      	add	r1, r6
 80012c6:	7ec9      	ldrb	r1, [r1, #27]
 80012c8:	f001 0601 	and.w	r6, r1, #1
 80012cc:	8bf9      	ldrh	r1, [r7, #30]
 80012ce:	fa06 f101 	lsl.w	r1, r6, r1
 80012d2:	b249      	sxtb	r1, r1
 80012d4:	4301      	orrs	r1, r0
 80012d6:	b249      	sxtb	r1, r1
 80012d8:	b2c8      	uxtb	r0, r1
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	7688      	strb	r0, [r1, #26]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80012de:	8bf9      	ldrh	r1, [r7, #30]
 80012e0:	3101      	adds	r1, #1
 80012e2:	83f9      	strh	r1, [r7, #30]
 80012e4:	8bf9      	ldrh	r1, [r7, #30]
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d0e7      	beq.n	80012ba <TL_deserialize+0x52>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80012ea:	2100      	movs	r1, #0
 80012ec:	83b9      	strh	r1, [r7, #28]
 80012ee:	e015      	b.n	800131c <TL_deserialize+0xb4>
    frame->mask |= ((frame->buffer[i+TL_SERDES_LAST_OFFSET] & 0b1) << i);
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	7e49      	ldrb	r1, [r1, #25]
 80012f4:	b248      	sxtb	r0, r1
 80012f6:	8bb9      	ldrh	r1, [r7, #28]
 80012f8:	3101      	adds	r1, #1
 80012fa:	687e      	ldr	r6, [r7, #4]
 80012fc:	4431      	add	r1, r6
 80012fe:	7ec9      	ldrb	r1, [r1, #27]
 8001300:	f001 0601 	and.w	r6, r1, #1
 8001304:	8bb9      	ldrh	r1, [r7, #28]
 8001306:	fa06 f101 	lsl.w	r1, r6, r1
 800130a:	b249      	sxtb	r1, r1
 800130c:	4301      	orrs	r1, r0
 800130e:	b249      	sxtb	r1, r1
 8001310:	b2c8      	uxtb	r0, r1
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	7648      	strb	r0, [r1, #25]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8001316:	8bb9      	ldrh	r1, [r7, #28]
 8001318:	3101      	adds	r1, #1
 800131a:	83b9      	strh	r1, [r7, #28]
 800131c:	8bb9      	ldrh	r1, [r7, #28]
 800131e:	2907      	cmp	r1, #7
 8001320:	d9e6      	bls.n	80012f0 <TL_deserialize+0x88>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001322:	2100      	movs	r1, #0
 8001324:	8379      	strh	r1, [r7, #26]
 8001326:	e015      	b.n	8001354 <TL_deserialize+0xec>
    frame->corrupt |= ((frame->buffer[i+TL_SERDES_MASK_OFFSET] & 0b1) << i);
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	7e09      	ldrb	r1, [r1, #24]
 800132c:	b248      	sxtb	r0, r1
 800132e:	8b79      	ldrh	r1, [r7, #26]
 8001330:	3109      	adds	r1, #9
 8001332:	687e      	ldr	r6, [r7, #4]
 8001334:	4431      	add	r1, r6
 8001336:	7ec9      	ldrb	r1, [r1, #27]
 8001338:	f001 0601 	and.w	r6, r1, #1
 800133c:	8b79      	ldrh	r1, [r7, #26]
 800133e:	fa06 f101 	lsl.w	r1, r6, r1
 8001342:	b249      	sxtb	r1, r1
 8001344:	4301      	orrs	r1, r0
 8001346:	b249      	sxtb	r1, r1
 8001348:	b2c8      	uxtb	r0, r1
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	7608      	strb	r0, [r1, #24]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 800134e:	8b79      	ldrh	r1, [r7, #26]
 8001350:	3101      	adds	r1, #1
 8001352:	8379      	strh	r1, [r7, #26]
 8001354:	8b79      	ldrh	r1, [r7, #26]
 8001356:	2900      	cmp	r1, #0
 8001358:	d0e6      	beq.n	8001328 <TL_deserialize+0xc0>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800135a:	2100      	movs	r1, #0
 800135c:	8339      	strh	r1, [r7, #24]
 800135e:	e01b      	b.n	8001398 <TL_deserialize+0x130>
    frame->data |= ((frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] & 0b1) << i);
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001366:	8b3e      	ldrh	r6, [r7, #24]
 8001368:	f106 0c0a 	add.w	ip, r6, #10
 800136c:	687e      	ldr	r6, [r7, #4]
 800136e:	4466      	add	r6, ip
 8001370:	7ef6      	ldrb	r6, [r6, #27]
 8001372:	f006 0c01 	and.w	ip, r6, #1
 8001376:	8b3e      	ldrh	r6, [r7, #24]
 8001378:	fa0c f606 	lsl.w	r6, ip, r6
 800137c:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 8001380:	4632      	mov	r2, r6
 8001382:	4663      	mov	r3, ip
 8001384:	ea40 0402 	orr.w	r4, r0, r2
 8001388:	ea41 0503 	orr.w	r5, r1, r3
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	e9c1 4504 	strd	r4, r5, [r1, #16]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001392:	8b39      	ldrh	r1, [r7, #24]
 8001394:	3101      	adds	r1, #1
 8001396:	8339      	strh	r1, [r7, #24]
 8001398:	8b39      	ldrh	r1, [r7, #24]
 800139a:	293f      	cmp	r1, #63	; 0x3f
 800139c:	d9e0      	bls.n	8001360 <TL_deserialize+0xf8>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 800139e:	2300      	movs	r3, #0
 80013a0:	82fb      	strh	r3, [r7, #22]
 80013a2:	e011      	b.n	80013c8 <TL_deserialize+0x160>
    frame->address |= ((frame->buffer[i+TL_SERDES_DATA_OFFSET] & 0b1) << i);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	8afa      	ldrh	r2, [r7, #22]
 80013aa:	324a      	adds	r2, #74	; 0x4a
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	440a      	add	r2, r1
 80013b0:	7ed2      	ldrb	r2, [r2, #27]
 80013b2:	f002 0101 	and.w	r1, r2, #1
 80013b6:	8afa      	ldrh	r2, [r7, #22]
 80013b8:	fa01 f202 	lsl.w	r2, r1, r2
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	609a      	str	r2, [r3, #8]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80013c2:	8afb      	ldrh	r3, [r7, #22]
 80013c4:	3301      	adds	r3, #1
 80013c6:	82fb      	strh	r3, [r7, #22]
 80013c8:	8afb      	ldrh	r3, [r7, #22]
 80013ca:	2b1f      	cmp	r3, #31
 80013cc:	d9ea      	bls.n	80013a4 <TL_deserialize+0x13c>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	82bb      	strh	r3, [r7, #20]
 80013d2:	e015      	b.n	8001400 <TL_deserialize+0x198>
    frame->source |= ((frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] & 0b1) << i);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	791b      	ldrb	r3, [r3, #4]
 80013d8:	b25a      	sxtb	r2, r3
 80013da:	8abb      	ldrh	r3, [r7, #20]
 80013dc:	336a      	adds	r3, #106	; 0x6a
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	440b      	add	r3, r1
 80013e2:	7edb      	ldrb	r3, [r3, #27]
 80013e4:	f003 0101 	and.w	r1, r3, #1
 80013e8:	8abb      	ldrh	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	711a      	strb	r2, [r3, #4]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80013fa:	8abb      	ldrh	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	82bb      	strh	r3, [r7, #20]
 8001400:	8abb      	ldrh	r3, [r7, #20]
 8001402:	2b03      	cmp	r3, #3
 8001404:	d9e6      	bls.n	80013d4 <TL_deserialize+0x16c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001406:	2300      	movs	r3, #0
 8001408:	827b      	strh	r3, [r7, #18]
 800140a:	e015      	b.n	8001438 <TL_deserialize+0x1d0>
    frame->size |= ((frame->buffer[i+TL_SERDES_SOURCE_OFFSET] & 0b1) << i);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	78db      	ldrb	r3, [r3, #3]
 8001410:	b25a      	sxtb	r2, r3
 8001412:	8a7b      	ldrh	r3, [r7, #18]
 8001414:	336e      	adds	r3, #110	; 0x6e
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	440b      	add	r3, r1
 800141a:	7edb      	ldrb	r3, [r3, #27]
 800141c:	f003 0101 	and.w	r1, r3, #1
 8001420:	8a7b      	ldrh	r3, [r7, #18]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	b25b      	sxtb	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b25b      	sxtb	r3, r3
 800142c:	b2da      	uxtb	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	70da      	strb	r2, [r3, #3]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001432:	8a7b      	ldrh	r3, [r7, #18]
 8001434:	3301      	adds	r3, #1
 8001436:	827b      	strh	r3, [r7, #18]
 8001438:	8a7b      	ldrh	r3, [r7, #18]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d9e6      	bls.n	800140c <TL_deserialize+0x1a4>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 800143e:	2300      	movs	r3, #0
 8001440:	823b      	strh	r3, [r7, #16]
 8001442:	e015      	b.n	8001470 <TL_deserialize+0x208>
    frame->param |= ((frame->buffer[i+TL_SERDES_SIZE_OFFSET] & 0b1) << i);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	789b      	ldrb	r3, [r3, #2]
 8001448:	b25a      	sxtb	r2, r3
 800144a:	8a3b      	ldrh	r3, [r7, #16]
 800144c:	3372      	adds	r3, #114	; 0x72
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	440b      	add	r3, r1
 8001452:	7edb      	ldrb	r3, [r3, #27]
 8001454:	f003 0101 	and.w	r1, r3, #1
 8001458:	8a3b      	ldrh	r3, [r7, #16]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	b25b      	sxtb	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b25b      	sxtb	r3, r3
 8001464:	b2da      	uxtb	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	709a      	strb	r2, [r3, #2]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 800146a:	8a3b      	ldrh	r3, [r7, #16]
 800146c:	3301      	adds	r3, #1
 800146e:	823b      	strh	r3, [r7, #16]
 8001470:	8a3b      	ldrh	r3, [r7, #16]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d9e6      	bls.n	8001444 <TL_deserialize+0x1dc>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8001476:	2300      	movs	r3, #0
 8001478:	81fb      	strh	r3, [r7, #14]
 800147a:	e015      	b.n	80014a8 <TL_deserialize+0x240>
    frame->opcode |= ((frame->buffer[i+TL_SERDES_PARAM_OFFSET] & 0b1) << i);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	785b      	ldrb	r3, [r3, #1]
 8001480:	b25a      	sxtb	r2, r3
 8001482:	89fb      	ldrh	r3, [r7, #14]
 8001484:	3375      	adds	r3, #117	; 0x75
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	440b      	add	r3, r1
 800148a:	7edb      	ldrb	r3, [r3, #27]
 800148c:	f003 0101 	and.w	r1, r3, #1
 8001490:	89fb      	ldrh	r3, [r7, #14]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	b25b      	sxtb	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b25b      	sxtb	r3, r3
 800149c:	b2da      	uxtb	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	705a      	strb	r2, [r3, #1]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80014a2:	89fb      	ldrh	r3, [r7, #14]
 80014a4:	3301      	adds	r3, #1
 80014a6:	81fb      	strh	r3, [r7, #14]
 80014a8:	89fb      	ldrh	r3, [r7, #14]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d9e6      	bls.n	800147c <TL_deserialize+0x214>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80014ae:	2300      	movs	r3, #0
 80014b0:	81bb      	strh	r3, [r7, #12]
 80014b2:	e015      	b.n	80014e0 <TL_deserialize+0x278>
    frame->chanid |= ((frame->buffer[i+TL_SERDES_OPCODE_OFFSET] & 0b1) << i);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b25a      	sxtb	r2, r3
 80014ba:	89bb      	ldrh	r3, [r7, #12]
 80014bc:	3378      	adds	r3, #120	; 0x78
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	440b      	add	r3, r1
 80014c2:	7edb      	ldrb	r3, [r3, #27]
 80014c4:	f003 0101 	and.w	r1, r3, #1
 80014c8:	89bb      	ldrh	r3, [r7, #12]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	701a      	strb	r2, [r3, #0]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80014da:	89bb      	ldrh	r3, [r7, #12]
 80014dc:	3301      	adds	r3, #1
 80014de:	81bb      	strh	r3, [r7, #12]
 80014e0:	89bb      	ldrh	r3, [r7, #12]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d9e6      	bls.n	80014b4 <TL_deserialize+0x24c>
  }
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bcf0      	pop	{r4, r5, r6, r7}
 80014f0:	4770      	bx	lr

080014f2 <TL_transmit>:

void TL_transmit(TileLinkController *tl) {
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  TL_serialize(&tl->tx_frame);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fda5 	bl	800104c <TL_serialize>

  // reset state
  tl->tx_bit_offset = 0;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
  tl->rx_bit_offset = 0;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
  tl->tx_finished = 0;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
  tl->rx_finished = 0;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  // enable TX RX
  tl->rx_pending = 1;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
  tl->tx_pending = 1;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800153c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001574 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001542:	490e      	ldr	r1, [pc, #56]	; (800157c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001558:	4c0b      	ldr	r4, [pc, #44]	; (8001588 <LoopFillZerobss+0x26>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001566:	f7ff fcdf 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156a:	f004 fa9d 	bl	8005aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156e:	f7ff f89f 	bl	80006b0 <main>
  bx  lr    
 8001572:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001574:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001580:	08005b48 	.word	0x08005b48
  ldr r2, =_sbss
 8001584:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001588:	2000049c 	.word	0x2000049c

0800158c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC_IRQHandler>
	...

08001590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <HAL_Init+0x40>)
 800159a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_Init+0x40>)
 80015a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_Init+0x40>)
 80015b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 f92b 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f808 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff fad6 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023c00 	.word	0x40023c00

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f943 	bl	800187e <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f000 f90b 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000000 	.word	0x20000000
 800162c:	20000008 	.word	0x20000008
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_IncTick+0x20>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x24>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_IncTick+0x24>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000008 	.word	0x20000008
 8001658:	20000498 	.word	0x20000498

0800165c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return uwTick;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_GetTick+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000498 	.word	0x20000498

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <__NVIC_EnableIRQ+0x38>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff29 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff3e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff31 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff feda 	bl	800165c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e099      	b.n	80019e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d4:	e00f      	b.n	80018f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d6:	f7ff fec1 	bl	800165c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d908      	bls.n	80018f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2203      	movs	r2, #3
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e078      	b.n	80019e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1e8      	bne.n	80018d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <HAL_DMA_Init+0x158>)
 8001910:	4013      	ands	r3, r2
 8001912:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001922:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	2b04      	cmp	r3, #4
 800194e:	d107      	bne.n	8001960 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	4313      	orrs	r3, r2
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f023 0307 	bic.w	r3, r3, #7
 8001976:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	2b04      	cmp	r3, #4
 8001988:	d117      	bne.n	80019ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00e      	beq.n	80019ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fb01 	bl	8001fa4 <DMA_CheckFifoParam>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019b6:	2301      	movs	r3, #1
 80019b8:	e016      	b.n	80019e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fab8 	bl	8001f38 <DMA_CalcBaseAndBitshift>
 80019c8:	4603      	mov	r3, r0
 80019ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	223f      	movs	r2, #63	; 0x3f
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	f010803f 	.word	0xf010803f

080019f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_DMA_Start_IT+0x26>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e040      	b.n	8001a9c <HAL_DMA_Start_IT+0xa8>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d12f      	bne.n	8001a8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2202      	movs	r2, #2
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 fa4a 	bl	8001edc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	223f      	movs	r2, #63	; 0x3f
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0216 	orr.w	r2, r2, #22
 8001a62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0208 	orr.w	r2, r2, #8
 8001a7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e005      	b.n	8001a9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a96:	2302      	movs	r3, #2
 8001a98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ab2:	f7ff fdd3 	bl	800165c <HAL_GetTick>
 8001ab6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d008      	beq.n	8001ad6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2280      	movs	r2, #128	; 0x80
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e052      	b.n	8001b7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0216 	bic.w	r2, r2, #22
 8001ae4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001af4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d103      	bne.n	8001b06 <HAL_DMA_Abort+0x62>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0208 	bic.w	r2, r2, #8
 8001b14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b26:	e013      	b.n	8001b50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b28:	f7ff fd98 	bl	800165c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	d90c      	bls.n	8001b50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2203      	movs	r2, #3
 8001b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e015      	b.n	8001b7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1e4      	bne.n	8001b28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	223f      	movs	r2, #63	; 0x3f
 8001b64:	409a      	lsls	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d004      	beq.n	8001ba2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00c      	b.n	8001bbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2205      	movs	r2, #5
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bd4:	4b8e      	ldr	r3, [pc, #568]	; (8001e10 <HAL_DMA_IRQHandler+0x248>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a8e      	ldr	r2, [pc, #568]	; (8001e14 <HAL_DMA_IRQHandler+0x24c>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0a9b      	lsrs	r3, r3, #10
 8001be0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d01a      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0204 	bic.w	r2, r2, #4
 8001c1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c20:	2208      	movs	r2, #8
 8001c22:	409a      	lsls	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	2201      	movs	r2, #1
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d012      	beq.n	8001c6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	2201      	movs	r2, #1
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	f043 0202 	orr.w	r2, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	2204      	movs	r2, #4
 8001c70:	409a      	lsls	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d012      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00b      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f043 0204 	orr.w	r2, r3, #4
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d043      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d03c      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d018      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d108      	bne.n	8001cf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d024      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4798      	blx	r3
 8001cf6:	e01f      	b.n	8001d38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01b      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
 8001d08:	e016      	b.n	8001d38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d107      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0208 	bic.w	r2, r2, #8
 8001d26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 808f 	beq.w	8001e68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8087 	beq.w	8001e68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2220      	movs	r2, #32
 8001d60:	409a      	lsls	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d136      	bne.n	8001de0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0216 	bic.w	r2, r2, #22
 8001d80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <HAL_DMA_IRQHandler+0x1da>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0208 	bic.w	r2, r2, #8
 8001db0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	223f      	movs	r2, #63	; 0x3f
 8001db8:	409a      	lsls	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d07e      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	4798      	blx	r3
        }
        return;
 8001dde:	e079      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01d      	beq.n	8001e2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10d      	bne.n	8001e18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d031      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
 8001e0c:	e02c      	b.n	8001e68 <HAL_DMA_IRQHandler+0x2a0>
 8001e0e:	bf00      	nop
 8001e10:	20000000 	.word	0x20000000
 8001e14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d023      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
 8001e28:	e01e      	b.n	8001e68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10f      	bne.n	8001e58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0210 	bic.w	r2, r2, #16
 8001e46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d032      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d022      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2205      	movs	r2, #5
 8001e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d307      	bcc.n	8001eb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f2      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x2cc>
 8001eae:	e000      	b.n	8001eb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001eb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	4798      	blx	r3
 8001ed2:	e000      	b.n	8001ed6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ed4:	bf00      	nop
    }
  }
}
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ef8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b40      	cmp	r3, #64	; 0x40
 8001f08:	d108      	bne.n	8001f1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f1a:	e007      	b.n	8001f2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	60da      	str	r2, [r3, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	3b10      	subs	r3, #16
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <DMA_CalcBaseAndBitshift+0x64>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f52:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <DMA_CalcBaseAndBitshift+0x68>)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d909      	bls.n	8001f7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f6e:	f023 0303 	bic.w	r3, r3, #3
 8001f72:	1d1a      	adds	r2, r3, #4
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	659a      	str	r2, [r3, #88]	; 0x58
 8001f78:	e007      	b.n	8001f8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	aaaaaaab 	.word	0xaaaaaaab
 8001fa0:	08005b30 	.word	0x08005b30

08001fa4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d11f      	bne.n	8001ffe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d856      	bhi.n	8002072 <DMA_CheckFifoParam+0xce>
 8001fc4:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <DMA_CheckFifoParam+0x28>)
 8001fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fca:	bf00      	nop
 8001fcc:	08001fdd 	.word	0x08001fdd
 8001fd0:	08001fef 	.word	0x08001fef
 8001fd4:	08001fdd 	.word	0x08001fdd
 8001fd8:	08002073 	.word	0x08002073
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d046      	beq.n	8002076 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fec:	e043      	b.n	8002076 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ff6:	d140      	bne.n	800207a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ffc:	e03d      	b.n	800207a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002006:	d121      	bne.n	800204c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d837      	bhi.n	800207e <DMA_CheckFifoParam+0xda>
 800200e:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <DMA_CheckFifoParam+0x70>)
 8002010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002014:	08002025 	.word	0x08002025
 8002018:	0800202b 	.word	0x0800202b
 800201c:	08002025 	.word	0x08002025
 8002020:	0800203d 	.word	0x0800203d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
      break;
 8002028:	e030      	b.n	800208c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d025      	beq.n	8002082 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800203a:	e022      	b.n	8002082 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002044:	d11f      	bne.n	8002086 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800204a:	e01c      	b.n	8002086 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d903      	bls.n	800205a <DMA_CheckFifoParam+0xb6>
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d003      	beq.n	8002060 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002058:	e018      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
      break;
 800205e:	e015      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00e      	beq.n	800208a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
      break;
 8002070:	e00b      	b.n	800208a <DMA_CheckFifoParam+0xe6>
      break;
 8002072:	bf00      	nop
 8002074:	e00a      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 8002076:	bf00      	nop
 8002078:	e008      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 800207a:	bf00      	nop
 800207c:	e006      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 800207e:	bf00      	nop
 8002080:	e004      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 8002082:	bf00      	nop
 8002084:	e002      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;   
 8002086:	bf00      	nop
 8002088:	e000      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 800208a:	bf00      	nop
    }
  } 
  
  return status; 
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	e165      	b.n	8002384 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020b8:	2201      	movs	r2, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	f040 8154 	bne.w	800237e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d005      	beq.n	80020ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d130      	bne.n	8002150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2203      	movs	r2, #3
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002124:	2201      	movs	r2, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 0201 	and.w	r2, r3, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b03      	cmp	r3, #3
 800215a:	d017      	beq.n	800218c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d123      	bne.n	80021e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	08da      	lsrs	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3208      	adds	r2, #8
 80021a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	08da      	lsrs	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3208      	adds	r2, #8
 80021da:	69b9      	ldr	r1, [r7, #24]
 80021dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0203 	and.w	r2, r3, #3
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80ae 	beq.w	800237e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b5d      	ldr	r3, [pc, #372]	; (800239c <HAL_GPIO_Init+0x300>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	4a5c      	ldr	r2, [pc, #368]	; (800239c <HAL_GPIO_Init+0x300>)
 800222c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002230:	6453      	str	r3, [r2, #68]	; 0x44
 8002232:	4b5a      	ldr	r3, [pc, #360]	; (800239c <HAL_GPIO_Init+0x300>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800223e:	4a58      	ldr	r2, [pc, #352]	; (80023a0 <HAL_GPIO_Init+0x304>)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	220f      	movs	r2, #15
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4f      	ldr	r2, [pc, #316]	; (80023a4 <HAL_GPIO_Init+0x308>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d025      	beq.n	80022b6 <HAL_GPIO_Init+0x21a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4e      	ldr	r2, [pc, #312]	; (80023a8 <HAL_GPIO_Init+0x30c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01f      	beq.n	80022b2 <HAL_GPIO_Init+0x216>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4d      	ldr	r2, [pc, #308]	; (80023ac <HAL_GPIO_Init+0x310>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d019      	beq.n	80022ae <HAL_GPIO_Init+0x212>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4c      	ldr	r2, [pc, #304]	; (80023b0 <HAL_GPIO_Init+0x314>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <HAL_GPIO_Init+0x20e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4b      	ldr	r2, [pc, #300]	; (80023b4 <HAL_GPIO_Init+0x318>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00d      	beq.n	80022a6 <HAL_GPIO_Init+0x20a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4a      	ldr	r2, [pc, #296]	; (80023b8 <HAL_GPIO_Init+0x31c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <HAL_GPIO_Init+0x206>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a49      	ldr	r2, [pc, #292]	; (80023bc <HAL_GPIO_Init+0x320>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_GPIO_Init+0x202>
 800229a:	2306      	movs	r3, #6
 800229c:	e00c      	b.n	80022b8 <HAL_GPIO_Init+0x21c>
 800229e:	2307      	movs	r3, #7
 80022a0:	e00a      	b.n	80022b8 <HAL_GPIO_Init+0x21c>
 80022a2:	2305      	movs	r3, #5
 80022a4:	e008      	b.n	80022b8 <HAL_GPIO_Init+0x21c>
 80022a6:	2304      	movs	r3, #4
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x21c>
 80022aa:	2303      	movs	r3, #3
 80022ac:	e004      	b.n	80022b8 <HAL_GPIO_Init+0x21c>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e002      	b.n	80022b8 <HAL_GPIO_Init+0x21c>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_GPIO_Init+0x21c>
 80022b6:	2300      	movs	r3, #0
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	f002 0203 	and.w	r2, r2, #3
 80022be:	0092      	lsls	r2, r2, #2
 80022c0:	4093      	lsls	r3, r2
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c8:	4935      	ldr	r1, [pc, #212]	; (80023a0 <HAL_GPIO_Init+0x304>)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d6:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <HAL_GPIO_Init+0x324>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022fa:	4a31      	ldr	r2, [pc, #196]	; (80023c0 <HAL_GPIO_Init+0x324>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002324:	4a26      	ldr	r2, [pc, #152]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800232a:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_GPIO_Init+0x324>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800234e:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002354:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002378:	4a11      	ldr	r2, [pc, #68]	; (80023c0 <HAL_GPIO_Init+0x324>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3301      	adds	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	f67f ae96 	bls.w	80020b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020c00 	.word	0x40020c00
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40021400 	.word	0x40021400
 80023bc:	40021800 	.word	0x40021800
 80023c0:	40013c00 	.word	0x40013c00

080023c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
 80023e0:	e001      	b.n	80023e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002404:	787b      	ldrb	r3, [r7, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002410:	e003      	b.n	800241a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	041a      	lsls	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	619a      	str	r2, [r3, #24]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800244e:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_PWREx_EnableOverDrive+0x94>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002454:	f7ff f902 	bl	800165c <HAL_GetTick>
 8002458:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800245a:	e009      	b.n	8002470 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800245c:	f7ff f8fe 	bl	800165c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800246a:	d901      	bls.n	8002470 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e01f      	b.n	80024b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002470:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d1ee      	bne.n	800245c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002484:	f7ff f8ea 	bl	800165c <HAL_GetTick>
 8002488:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800248a:	e009      	b.n	80024a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800248c:	f7ff f8e6 	bl	800165c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800249a:	d901      	bls.n	80024a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e007      	b.n	80024b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024ac:	d1ee      	bne.n	800248c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	420e0040 	.word	0x420e0040
 80024c0:	40007000 	.word	0x40007000
 80024c4:	420e0044 	.word	0x420e0044

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0cc      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b68      	ldr	r3, [pc, #416]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d90c      	bls.n	8002504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b65      	ldr	r3, [pc, #404]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b63      	ldr	r3, [pc, #396]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0b8      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800251c:	4b59      	ldr	r3, [pc, #356]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4a58      	ldr	r2, [pc, #352]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002534:	4b53      	ldr	r3, [pc, #332]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4a52      	ldr	r2, [pc, #328]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800253e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002540:	4b50      	ldr	r3, [pc, #320]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	494d      	ldr	r1, [pc, #308]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d044      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d119      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e07f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d003      	beq.n	8002586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002582:	2b03      	cmp	r3, #3
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002586:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e06f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e067      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a6:	4b37      	ldr	r3, [pc, #220]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 0203 	bic.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4934      	ldr	r1, [pc, #208]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b8:	f7ff f850 	bl	800165c <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7ff f84c 	bl	800165c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e04f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 020c 	and.w	r2, r3, #12
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1eb      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d20c      	bcs.n	8002610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e032      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4916      	ldr	r1, [pc, #88]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	490e      	ldr	r1, [pc, #56]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264e:	f000 f855 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 8002652:	4602      	mov	r2, r0
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	490a      	ldr	r1, [pc, #40]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	5ccb      	ldrb	r3, [r1, r3]
 8002662:	fa22 f303 	lsr.w	r3, r2, r3
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe ffb0 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023c00 	.word	0x40023c00
 8002684:	40023800 	.word	0x40023800
 8002688:	08005b18 	.word	0x08005b18
 800268c:	20000000 	.word	0x20000000
 8002690:	20000004 	.word	0x20000004

08002694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026b0:	f7ff fff0 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4903      	ldr	r1, [pc, #12]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	08005b28 	.word	0x08005b28

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026d8:	f7ff ffdc 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0b5b      	lsrs	r3, r3, #13
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4903      	ldr	r1, [pc, #12]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	08005b28 	.word	0x08005b28

080026fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002700:	b0a6      	sub	sp, #152	; 0x98
 8002702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002722:	4bc8      	ldr	r3, [pc, #800]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x348>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b0c      	cmp	r3, #12
 800272c:	f200 817e 	bhi.w	8002a2c <HAL_RCC_GetSysClockFreq+0x330>
 8002730:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002736:	bf00      	nop
 8002738:	0800276d 	.word	0x0800276d
 800273c:	08002a2d 	.word	0x08002a2d
 8002740:	08002a2d 	.word	0x08002a2d
 8002744:	08002a2d 	.word	0x08002a2d
 8002748:	08002775 	.word	0x08002775
 800274c:	08002a2d 	.word	0x08002a2d
 8002750:	08002a2d 	.word	0x08002a2d
 8002754:	08002a2d 	.word	0x08002a2d
 8002758:	0800277d 	.word	0x0800277d
 800275c:	08002a2d 	.word	0x08002a2d
 8002760:	08002a2d 	.word	0x08002a2d
 8002764:	08002a2d 	.word	0x08002a2d
 8002768:	080028e7 	.word	0x080028e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800276c:	4bb6      	ldr	r3, [pc, #728]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x34c>)
 800276e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002772:	e15f      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002774:	4bb5      	ldr	r3, [pc, #724]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x350>)
 8002776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800277a:	e15b      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800277c:	4bb1      	ldr	r3, [pc, #708]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x348>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002784:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002788:	4bae      	ldr	r3, [pc, #696]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x348>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d031      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002794:	4bab      	ldr	r3, [pc, #684]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x348>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	2200      	movs	r2, #0
 800279c:	66bb      	str	r3, [r7, #104]	; 0x68
 800279e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a6:	663b      	str	r3, [r7, #96]	; 0x60
 80027a8:	2300      	movs	r3, #0
 80027aa:	667b      	str	r3, [r7, #100]	; 0x64
 80027ac:	4ba7      	ldr	r3, [pc, #668]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x350>)
 80027ae:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80027b2:	462a      	mov	r2, r5
 80027b4:	fb03 f202 	mul.w	r2, r3, r2
 80027b8:	2300      	movs	r3, #0
 80027ba:	4621      	mov	r1, r4
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	4aa2      	ldr	r2, [pc, #648]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x350>)
 80027c4:	4621      	mov	r1, r4
 80027c6:	fba1 1202 	umull	r1, r2, r1, r2
 80027ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027cc:	460a      	mov	r2, r1
 80027ce:	67ba      	str	r2, [r7, #120]	; 0x78
 80027d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80027d2:	4413      	add	r3, r2
 80027d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027da:	2200      	movs	r2, #0
 80027dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80027de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027e4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80027e8:	f7fd fd0c 	bl	8000204 <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4613      	mov	r3, r2
 80027f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80027f6:	e064      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f8:	4b92      	ldr	r3, [pc, #584]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x348>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	2200      	movs	r2, #0
 8002800:	653b      	str	r3, [r7, #80]	; 0x50
 8002802:	657a      	str	r2, [r7, #84]	; 0x54
 8002804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800280a:	64bb      	str	r3, [r7, #72]	; 0x48
 800280c:	2300      	movs	r3, #0
 800280e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002810:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002814:	4622      	mov	r2, r4
 8002816:	462b      	mov	r3, r5
 8002818:	f04f 0000 	mov.w	r0, #0
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	0159      	lsls	r1, r3, #5
 8002822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002826:	0150      	lsls	r0, r2, #5
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4621      	mov	r1, r4
 800282e:	1a51      	subs	r1, r2, r1
 8002830:	6139      	str	r1, [r7, #16]
 8002832:	4629      	mov	r1, r5
 8002834:	eb63 0301 	sbc.w	r3, r3, r1
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002846:	4659      	mov	r1, fp
 8002848:	018b      	lsls	r3, r1, #6
 800284a:	4651      	mov	r1, sl
 800284c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002850:	4651      	mov	r1, sl
 8002852:	018a      	lsls	r2, r1, #6
 8002854:	4651      	mov	r1, sl
 8002856:	ebb2 0801 	subs.w	r8, r2, r1
 800285a:	4659      	mov	r1, fp
 800285c:	eb63 0901 	sbc.w	r9, r3, r1
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800286c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002870:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002874:	4690      	mov	r8, r2
 8002876:	4699      	mov	r9, r3
 8002878:	4623      	mov	r3, r4
 800287a:	eb18 0303 	adds.w	r3, r8, r3
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	462b      	mov	r3, r5
 8002882:	eb49 0303 	adc.w	r3, r9, r3
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002894:	4629      	mov	r1, r5
 8002896:	028b      	lsls	r3, r1, #10
 8002898:	4621      	mov	r1, r4
 800289a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800289e:	4621      	mov	r1, r4
 80028a0:	028a      	lsls	r2, r1, #10
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028aa:	2200      	movs	r2, #0
 80028ac:	643b      	str	r3, [r7, #64]	; 0x40
 80028ae:	647a      	str	r2, [r7, #68]	; 0x44
 80028b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028b4:	f7fd fca6 	bl	8000204 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4613      	mov	r3, r2
 80028be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028c2:	4b60      	ldr	r3, [pc, #384]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x348>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	0c1b      	lsrs	r3, r3, #16
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	3301      	adds	r3, #1
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80028d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80028e4:	e0a6      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e6:	4b57      	ldr	r3, [pc, #348]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x348>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f2:	4b54      	ldr	r3, [pc, #336]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x348>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d02a      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x348>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	2200      	movs	r2, #0
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
 8002908:	63fa      	str	r2, [r7, #60]	; 0x3c
 800290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002910:	2100      	movs	r1, #0
 8002912:	4b4e      	ldr	r3, [pc, #312]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x350>)
 8002914:	fb03 f201 	mul.w	r2, r3, r1
 8002918:	2300      	movs	r3, #0
 800291a:	fb00 f303 	mul.w	r3, r0, r3
 800291e:	4413      	add	r3, r2
 8002920:	4a4a      	ldr	r2, [pc, #296]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x350>)
 8002922:	fba0 1202 	umull	r1, r2, r0, r2
 8002926:	677a      	str	r2, [r7, #116]	; 0x74
 8002928:	460a      	mov	r2, r1
 800292a:	673a      	str	r2, [r7, #112]	; 0x70
 800292c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800292e:	4413      	add	r3, r2
 8002930:	677b      	str	r3, [r7, #116]	; 0x74
 8002932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002936:	2200      	movs	r2, #0
 8002938:	633b      	str	r3, [r7, #48]	; 0x30
 800293a:	637a      	str	r2, [r7, #52]	; 0x34
 800293c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002940:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002944:	f7fd fc5e 	bl	8000204 <__aeabi_uldivmod>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4613      	mov	r3, r2
 800294e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002952:	e05b      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002954:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x348>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	2200      	movs	r2, #0
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
 800295e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
 800296c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002970:	4642      	mov	r2, r8
 8002972:	464b      	mov	r3, r9
 8002974:	f04f 0000 	mov.w	r0, #0
 8002978:	f04f 0100 	mov.w	r1, #0
 800297c:	0159      	lsls	r1, r3, #5
 800297e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002982:	0150      	lsls	r0, r2, #5
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4641      	mov	r1, r8
 800298a:	ebb2 0a01 	subs.w	sl, r2, r1
 800298e:	4649      	mov	r1, r9
 8002990:	eb63 0b01 	sbc.w	fp, r3, r1
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029a8:	ebb2 040a 	subs.w	r4, r2, sl
 80029ac:	eb63 050b 	sbc.w	r5, r3, fp
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	00eb      	lsls	r3, r5, #3
 80029ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029be:	00e2      	lsls	r2, r4, #3
 80029c0:	4614      	mov	r4, r2
 80029c2:	461d      	mov	r5, r3
 80029c4:	4643      	mov	r3, r8
 80029c6:	18e3      	adds	r3, r4, r3
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	464b      	mov	r3, r9
 80029cc:	eb45 0303 	adc.w	r3, r5, r3
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029de:	4629      	mov	r1, r5
 80029e0:	028b      	lsls	r3, r1, #10
 80029e2:	4621      	mov	r1, r4
 80029e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029e8:	4621      	mov	r1, r4
 80029ea:	028a      	lsls	r2, r1, #10
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029f4:	2200      	movs	r2, #0
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	61fa      	str	r2, [r7, #28]
 80029fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029fe:	f7fd fc01 	bl	8000204 <__aeabi_uldivmod>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4613      	mov	r3, r2
 8002a08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	0f1b      	lsrs	r3, r3, #28
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002a1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a2a:	e003      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3798      	adds	r7, #152	; 0x98
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	00f42400 	.word	0x00f42400
 8002a4c:	017d7840 	.word	0x017d7840

08002a50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e28d      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8083 	beq.w	8002b76 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a70:	4b94      	ldr	r3, [pc, #592]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d019      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a7c:	4b91      	ldr	r3, [pc, #580]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a88:	4b8e      	ldr	r3, [pc, #568]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a94:	d00c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a96:	4b8b      	ldr	r3, [pc, #556]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	d112      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa2:	4b88      	ldr	r3, [pc, #544]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aae:	d10b      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	4b84      	ldr	r3, [pc, #528]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d05b      	beq.n	8002b74 <HAL_RCC_OscConfig+0x124>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d157      	bne.n	8002b74 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e25a      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad0:	d106      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x90>
 8002ad2:	4b7c      	ldr	r3, [pc, #496]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a7b      	ldr	r2, [pc, #492]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e01d      	b.n	8002b1c <HAL_RCC_OscConfig+0xcc>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0xb4>
 8002aea:	4b76      	ldr	r3, [pc, #472]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a75      	ldr	r2, [pc, #468]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b73      	ldr	r3, [pc, #460]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a72      	ldr	r2, [pc, #456]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0xcc>
 8002b04:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a6e      	ldr	r2, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b6c      	ldr	r3, [pc, #432]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a6b      	ldr	r2, [pc, #428]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe fd9a 	bl	800165c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fd96 	bl	800165c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	; 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e21f      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b61      	ldr	r3, [pc, #388]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0xdc>
 8002b4a:	e014      	b.n	8002b76 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fd86 	bl	800165c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b54:	f7fe fd82 	bl	800165c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e20b      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	4b57      	ldr	r3, [pc, #348]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x104>
 8002b72:	e000      	b.n	8002b76 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d06f      	beq.n	8002c62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b82:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d017      	beq.n	8002bbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b8e:	4b4d      	ldr	r3, [pc, #308]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d105      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b9a:	4b4a      	ldr	r3, [pc, #296]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ba6:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bae:	2b0c      	cmp	r3, #12
 8002bb0:	d11c      	bne.n	8002bec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb2:	4b44      	ldr	r3, [pc, #272]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d116      	bne.n	8002bec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bbe:	4b41      	ldr	r3, [pc, #260]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x186>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e1d3      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4937      	ldr	r1, [pc, #220]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	e03a      	b.n	8002c62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf4:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HAL_RCC_OscConfig+0x278>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fd2f 	bl	800165c <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fe fd2b 	bl	800165c <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e1b4      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4925      	ldr	r1, [pc, #148]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]
 8002c34:	e015      	b.n	8002c62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_RCC_OscConfig+0x278>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fd0e 	bl	800165c <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fe fd0a 	bl	800165c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e193      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d036      	beq.n	8002cdc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d016      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe fcee 	bl	800165c <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fe fcea 	bl	800165c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e173      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x234>
 8002ca2:	e01b      	b.n	8002cdc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002caa:	f7fe fcd7 	bl	800165c <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb0:	e00e      	b.n	8002cd0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb2:	f7fe fcd3 	bl	800165c <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d907      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e15c      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	42470000 	.word	0x42470000
 8002ccc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd0:	4b8a      	ldr	r3, [pc, #552]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ea      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8097 	beq.w	8002e18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cee:	4b83      	ldr	r3, [pc, #524]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10f      	bne.n	8002d1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	4b7f      	ldr	r3, [pc, #508]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	4a7e      	ldr	r2, [pc, #504]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0a:	4b7c      	ldr	r3, [pc, #496]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	4b79      	ldr	r3, [pc, #484]	; (8002f00 <HAL_RCC_OscConfig+0x4b0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d118      	bne.n	8002d58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d26:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <HAL_RCC_OscConfig+0x4b0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a75      	ldr	r2, [pc, #468]	; (8002f00 <HAL_RCC_OscConfig+0x4b0>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d32:	f7fe fc93 	bl	800165c <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3a:	f7fe fc8f 	bl	800165c <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e118      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	4b6c      	ldr	r3, [pc, #432]	; (8002f00 <HAL_RCC_OscConfig+0x4b0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x31e>
 8002d60:	4b66      	ldr	r3, [pc, #408]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	4a65      	ldr	r2, [pc, #404]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6c:	e01c      	b.n	8002da8 <HAL_RCC_OscConfig+0x358>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b05      	cmp	r3, #5
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x340>
 8002d76:	4b61      	ldr	r3, [pc, #388]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	4a60      	ldr	r2, [pc, #384]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002d7c:	f043 0304 	orr.w	r3, r3, #4
 8002d80:	6713      	str	r3, [r2, #112]	; 0x70
 8002d82:	4b5e      	ldr	r3, [pc, #376]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	4a5d      	ldr	r2, [pc, #372]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8e:	e00b      	b.n	8002da8 <HAL_RCC_OscConfig+0x358>
 8002d90:	4b5a      	ldr	r3, [pc, #360]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	4a59      	ldr	r2, [pc, #356]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9c:	4b57      	ldr	r3, [pc, #348]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	4a56      	ldr	r2, [pc, #344]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002da2:	f023 0304 	bic.w	r3, r3, #4
 8002da6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d015      	beq.n	8002ddc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe fc54 	bl	800165c <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db8:	f7fe fc50 	bl	800165c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e0d7      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dce:	4b4b      	ldr	r3, [pc, #300]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0ee      	beq.n	8002db8 <HAL_RCC_OscConfig+0x368>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fc3e 	bl	800165c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de4:	f7fe fc3a 	bl	800165c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e0c1      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfa:	4b40      	ldr	r3, [pc, #256]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ee      	bne.n	8002de4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d105      	bne.n	8002e18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80ad 	beq.w	8002f7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e22:	4b36      	ldr	r3, [pc, #216]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d060      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d145      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e36:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <HAL_RCC_OscConfig+0x4b4>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fc0e 	bl	800165c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fc0a 	bl	800165c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e093      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69da      	ldr	r2, [r3, #28]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	019b      	lsls	r3, r3, #6
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	085b      	lsrs	r3, r3, #1
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	061b      	lsls	r3, r3, #24
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	071b      	lsls	r3, r3, #28
 8002e8e:	491b      	ldr	r1, [pc, #108]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x4b4>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7fe fbdf 	bl	800165c <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea2:	f7fe fbdb 	bl	800165c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e064      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x452>
 8002ec0:	e05c      	b.n	8002f7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <HAL_RCC_OscConfig+0x4b4>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fbc8 	bl	800165c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe fbc4 	bl	800165c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e04d      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x480>
 8002eee:	e045      	b.n	8002f7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e040      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40007000 	.word	0x40007000
 8002f04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f08:	4b1f      	ldr	r3, [pc, #124]	; (8002f88 <HAL_RCC_OscConfig+0x538>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d030      	beq.n	8002f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d129      	bne.n	8002f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d122      	bne.n	8002f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f38:	4013      	ands	r3, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d119      	bne.n	8002f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	3b01      	subs	r3, #1
 8002f52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d10f      	bne.n	8002f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40023800 	.word	0x40023800

08002f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e041      	b.n	8003022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd fe06 	bl	8000bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f000 fe1c 	bl	8003c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e041      	b.n	80030c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d106      	bne.n	8003056 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f839 	bl	80030c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3304      	adds	r3, #4
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f000 fdcd 	bl	8003c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <HAL_TIM_PWM_Start+0x24>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e022      	b.n	8003146 <HAL_TIM_PWM_Start+0x6a>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b04      	cmp	r3, #4
 8003104:	d109      	bne.n	800311a <HAL_TIM_PWM_Start+0x3e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	bf14      	ite	ne
 8003112:	2301      	movne	r3, #1
 8003114:	2300      	moveq	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	e015      	b.n	8003146 <HAL_TIM_PWM_Start+0x6a>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d109      	bne.n	8003134 <HAL_TIM_PWM_Start+0x58>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e008      	b.n	8003146 <HAL_TIM_PWM_Start+0x6a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07c      	b.n	8003248 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <HAL_TIM_PWM_Start+0x82>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800315c:	e013      	b.n	8003186 <HAL_TIM_PWM_Start+0xaa>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b04      	cmp	r3, #4
 8003162:	d104      	bne.n	800316e <HAL_TIM_PWM_Start+0x92>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800316c:	e00b      	b.n	8003186 <HAL_TIM_PWM_Start+0xaa>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d104      	bne.n	800317e <HAL_TIM_PWM_Start+0xa2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800317c:	e003      	b.n	8003186 <HAL_TIM_PWM_Start+0xaa>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2201      	movs	r2, #1
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f001 f94e 	bl	8004430 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2d      	ldr	r2, [pc, #180]	; (8003250 <HAL_TIM_PWM_Start+0x174>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d004      	beq.n	80031a8 <HAL_TIM_PWM_Start+0xcc>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <HAL_TIM_PWM_Start+0x178>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_TIM_PWM_Start+0xd0>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <HAL_TIM_PWM_Start+0xd2>
 80031ac:	2300      	movs	r3, #0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a22      	ldr	r2, [pc, #136]	; (8003250 <HAL_TIM_PWM_Start+0x174>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d022      	beq.n	8003212 <HAL_TIM_PWM_Start+0x136>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d01d      	beq.n	8003212 <HAL_TIM_PWM_Start+0x136>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1f      	ldr	r2, [pc, #124]	; (8003258 <HAL_TIM_PWM_Start+0x17c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d018      	beq.n	8003212 <HAL_TIM_PWM_Start+0x136>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	; (800325c <HAL_TIM_PWM_Start+0x180>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_TIM_PWM_Start+0x136>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <HAL_TIM_PWM_Start+0x184>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_TIM_PWM_Start+0x136>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a16      	ldr	r2, [pc, #88]	; (8003254 <HAL_TIM_PWM_Start+0x178>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_TIM_PWM_Start+0x136>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a18      	ldr	r2, [pc, #96]	; (8003264 <HAL_TIM_PWM_Start+0x188>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_TIM_PWM_Start+0x136>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a16      	ldr	r2, [pc, #88]	; (8003268 <HAL_TIM_PWM_Start+0x18c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d111      	bne.n	8003236 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b06      	cmp	r3, #6
 8003222:	d010      	beq.n	8003246 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003234:	e007      	b.n	8003246 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0201 	orr.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40010000 	.word	0x40010000
 8003254:	40010400 	.word	0x40010400
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800
 8003260:	40000c00 	.word	0x40000c00
 8003264:	40014000 	.word	0x40014000
 8003268:	40001800 	.word	0x40001800

0800326c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e041      	b.n	8003302 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fd fcb8 	bl	8000c08 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f000 fcac 	bl	8003c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d104      	bne.n	800332a <HAL_TIM_IC_Start_IT+0x1e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e013      	b.n	8003352 <HAL_TIM_IC_Start_IT+0x46>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d104      	bne.n	800333a <HAL_TIM_IC_Start_IT+0x2e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003336:	b2db      	uxtb	r3, r3
 8003338:	e00b      	b.n	8003352 <HAL_TIM_IC_Start_IT+0x46>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b08      	cmp	r3, #8
 800333e:	d104      	bne.n	800334a <HAL_TIM_IC_Start_IT+0x3e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003346:	b2db      	uxtb	r3, r3
 8003348:	e003      	b.n	8003352 <HAL_TIM_IC_Start_IT+0x46>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003350:	b2db      	uxtb	r3, r3
 8003352:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d104      	bne.n	8003364 <HAL_TIM_IC_Start_IT+0x58>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e013      	b.n	800338c <HAL_TIM_IC_Start_IT+0x80>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b04      	cmp	r3, #4
 8003368:	d104      	bne.n	8003374 <HAL_TIM_IC_Start_IT+0x68>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e00b      	b.n	800338c <HAL_TIM_IC_Start_IT+0x80>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2b08      	cmp	r3, #8
 8003378:	d104      	bne.n	8003384 <HAL_TIM_IC_Start_IT+0x78>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e003      	b.n	800338c <HAL_TIM_IC_Start_IT+0x80>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800338a:	b2db      	uxtb	r3, r3
 800338c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800338e:	7bbb      	ldrb	r3, [r7, #14]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d102      	bne.n	800339a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003394:	7b7b      	ldrb	r3, [r7, #13]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d001      	beq.n	800339e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0cc      	b.n	8003538 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_IC_Start_IT+0xa2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ac:	e013      	b.n	80033d6 <HAL_TIM_IC_Start_IT+0xca>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d104      	bne.n	80033be <HAL_TIM_IC_Start_IT+0xb2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033bc:	e00b      	b.n	80033d6 <HAL_TIM_IC_Start_IT+0xca>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d104      	bne.n	80033ce <HAL_TIM_IC_Start_IT+0xc2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033cc:	e003      	b.n	80033d6 <HAL_TIM_IC_Start_IT+0xca>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_IC_Start_IT+0xda>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033e4:	e013      	b.n	800340e <HAL_TIM_IC_Start_IT+0x102>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d104      	bne.n	80033f6 <HAL_TIM_IC_Start_IT+0xea>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033f4:	e00b      	b.n	800340e <HAL_TIM_IC_Start_IT+0x102>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d104      	bne.n	8003406 <HAL_TIM_IC_Start_IT+0xfa>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003404:	e003      	b.n	800340e <HAL_TIM_IC_Start_IT+0x102>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2202      	movs	r2, #2
 800340a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b0c      	cmp	r3, #12
 8003412:	d841      	bhi.n	8003498 <HAL_TIM_IC_Start_IT+0x18c>
 8003414:	a201      	add	r2, pc, #4	; (adr r2, 800341c <HAL_TIM_IC_Start_IT+0x110>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003451 	.word	0x08003451
 8003420:	08003499 	.word	0x08003499
 8003424:	08003499 	.word	0x08003499
 8003428:	08003499 	.word	0x08003499
 800342c:	08003463 	.word	0x08003463
 8003430:	08003499 	.word	0x08003499
 8003434:	08003499 	.word	0x08003499
 8003438:	08003499 	.word	0x08003499
 800343c:	08003475 	.word	0x08003475
 8003440:	08003499 	.word	0x08003499
 8003444:	08003499 	.word	0x08003499
 8003448:	08003499 	.word	0x08003499
 800344c:	08003487 	.word	0x08003487
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0202 	orr.w	r2, r2, #2
 800345e:	60da      	str	r2, [r3, #12]
      break;
 8003460:	e01d      	b.n	800349e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0204 	orr.w	r2, r2, #4
 8003470:	60da      	str	r2, [r3, #12]
      break;
 8003472:	e014      	b.n	800349e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0208 	orr.w	r2, r2, #8
 8003482:	60da      	str	r2, [r3, #12]
      break;
 8003484:	e00b      	b.n	800349e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0210 	orr.w	r2, r2, #16
 8003494:	60da      	str	r2, [r3, #12]
      break;
 8003496:	e002      	b.n	800349e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	bf00      	nop
  }

  if (status == HAL_OK)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d148      	bne.n	8003536 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 ffbf 	bl	8004430 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a22      	ldr	r2, [pc, #136]	; (8003540 <HAL_TIM_IC_Start_IT+0x234>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c4:	d01d      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1e      	ldr	r2, [pc, #120]	; (8003544 <HAL_TIM_IC_Start_IT+0x238>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <HAL_TIM_IC_Start_IT+0x23c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1b      	ldr	r2, [pc, #108]	; (800354c <HAL_TIM_IC_Start_IT+0x240>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a19      	ldr	r2, [pc, #100]	; (8003550 <HAL_TIM_IC_Start_IT+0x244>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a18      	ldr	r2, [pc, #96]	; (8003554 <HAL_TIM_IC_Start_IT+0x248>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_TIM_IC_Start_IT+0x1f6>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a16      	ldr	r2, [pc, #88]	; (8003558 <HAL_TIM_IC_Start_IT+0x24c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d111      	bne.n	8003526 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b06      	cmp	r3, #6
 8003512:	d010      	beq.n	8003536 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003524:	e007      	b.n	8003536 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40010000 	.word	0x40010000
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40000c00 	.word	0x40000c00
 8003550:	40010400 	.word	0x40010400
 8003554:	40014000 	.word	0x40014000
 8003558:	40001800 	.word	0x40001800

0800355c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b02      	cmp	r3, #2
 8003570:	d122      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b02      	cmp	r3, #2
 800357e:	d11b      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0202 	mvn.w	r2, #2
 8003588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fc ffb2 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fb0f 	bl	8003bca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fb16 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d122      	bne.n	800360c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d11b      	bne.n	800360c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0204 	mvn.w	r2, #4
 80035dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2202      	movs	r2, #2
 80035e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fc ff88 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 80035f8:	e005      	b.n	8003606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fae5 	bl	8003bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 faec 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b08      	cmp	r3, #8
 8003618:	d122      	bne.n	8003660 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b08      	cmp	r3, #8
 8003626:	d11b      	bne.n	8003660 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0208 	mvn.w	r2, #8
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2204      	movs	r2, #4
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fc ff5e 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fabb 	bl	8003bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fac2 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b10      	cmp	r3, #16
 800366c:	d122      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b10      	cmp	r3, #16
 800367a:	d11b      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0210 	mvn.w	r2, #16
 8003684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2208      	movs	r2, #8
 800368a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fc ff34 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fa91 	bl	8003bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fa98 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d107      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0201 	mvn.w	r2, #1
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fa6b 	bl	8003bb6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b80      	cmp	r3, #128	; 0x80
 80036ec:	d10e      	bne.n	800370c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f8:	2b80      	cmp	r3, #128	; 0x80
 80036fa:	d107      	bne.n	800370c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 ff90 	bl	800462c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d10e      	bne.n	8003738 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	d107      	bne.n	8003738 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fa5d 	bl	8003bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b20      	cmp	r3, #32
 8003744:	d10e      	bne.n	8003764 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b20      	cmp	r3, #32
 8003752:	d107      	bne.n	8003764 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0220 	mvn.w	r2, #32
 800375c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 ff5a 	bl	8004618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003786:	2302      	movs	r3, #2
 8003788:	e088      	b.n	800389c <HAL_TIM_IC_ConfigChannel+0x130>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d11b      	bne.n	80037d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	6819      	ldr	r1, [r3, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f000 fc7e 	bl	80040a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 020c 	bic.w	r2, r2, #12
 80037ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6999      	ldr	r1, [r3, #24]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	619a      	str	r2, [r3, #24]
 80037ce:	e060      	b.n	8003892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d11c      	bne.n	8003810 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	6819      	ldr	r1, [r3, #0]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f000 fd02 	bl	80041ee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6999      	ldr	r1, [r3, #24]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	021a      	lsls	r2, r3, #8
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	619a      	str	r2, [r3, #24]
 800380e:	e040      	b.n	8003892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b08      	cmp	r3, #8
 8003814:	d11b      	bne.n	800384e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6819      	ldr	r1, [r3, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f000 fd4f 	bl	80042c8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69da      	ldr	r2, [r3, #28]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 020c 	bic.w	r2, r2, #12
 8003838:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69d9      	ldr	r1, [r3, #28]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	61da      	str	r2, [r3, #28]
 800384c:	e021      	b.n	8003892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d11c      	bne.n	800388e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6819      	ldr	r1, [r3, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f000 fd6c 	bl	8004340 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69da      	ldr	r2, [r3, #28]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003876:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69d9      	ldr	r1, [r3, #28]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	021a      	lsls	r2, r3, #8
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	61da      	str	r2, [r3, #28]
 800388c:	e001      	b.n	8003892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800389a:	7dfb      	ldrb	r3, [r7, #23]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038be:	2302      	movs	r3, #2
 80038c0:	e0ae      	b.n	8003a20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b0c      	cmp	r3, #12
 80038ce:	f200 809f 	bhi.w	8003a10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038d2:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d8:	0800390d 	.word	0x0800390d
 80038dc:	08003a11 	.word	0x08003a11
 80038e0:	08003a11 	.word	0x08003a11
 80038e4:	08003a11 	.word	0x08003a11
 80038e8:	0800394d 	.word	0x0800394d
 80038ec:	08003a11 	.word	0x08003a11
 80038f0:	08003a11 	.word	0x08003a11
 80038f4:	08003a11 	.word	0x08003a11
 80038f8:	0800398f 	.word	0x0800398f
 80038fc:	08003a11 	.word	0x08003a11
 8003900:	08003a11 	.word	0x08003a11
 8003904:	08003a11 	.word	0x08003a11
 8003908:	080039cf 	.word	0x080039cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fa18 	bl	8003d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0208 	orr.w	r2, r2, #8
 8003926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0204 	bic.w	r2, r2, #4
 8003936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6999      	ldr	r1, [r3, #24]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	619a      	str	r2, [r3, #24]
      break;
 800394a:	e064      	b.n	8003a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fa68 	bl	8003e28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6999      	ldr	r1, [r3, #24]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	021a      	lsls	r2, r3, #8
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	619a      	str	r2, [r3, #24]
      break;
 800398c:	e043      	b.n	8003a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fabd 	bl	8003f14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0208 	orr.w	r2, r2, #8
 80039a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0204 	bic.w	r2, r2, #4
 80039b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69d9      	ldr	r1, [r3, #28]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	61da      	str	r2, [r3, #28]
      break;
 80039cc:	e023      	b.n	8003a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fb11 	bl	8003ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69d9      	ldr	r1, [r3, #28]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	021a      	lsls	r2, r3, #8
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	61da      	str	r2, [r3, #28]
      break;
 8003a0e:	e002      	b.n	8003a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	75fb      	strb	r3, [r7, #23]
      break;
 8003a14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIM_ConfigClockSource+0x1c>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e0b4      	b.n	8003bae <HAL_TIM_ConfigClockSource+0x186>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a7c:	d03e      	beq.n	8003afc <HAL_TIM_ConfigClockSource+0xd4>
 8003a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a82:	f200 8087 	bhi.w	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8a:	f000 8086 	beq.w	8003b9a <HAL_TIM_ConfigClockSource+0x172>
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a92:	d87f      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003a94:	2b70      	cmp	r3, #112	; 0x70
 8003a96:	d01a      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0xa6>
 8003a98:	2b70      	cmp	r3, #112	; 0x70
 8003a9a:	d87b      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003a9c:	2b60      	cmp	r3, #96	; 0x60
 8003a9e:	d050      	beq.n	8003b42 <HAL_TIM_ConfigClockSource+0x11a>
 8003aa0:	2b60      	cmp	r3, #96	; 0x60
 8003aa2:	d877      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa4:	2b50      	cmp	r3, #80	; 0x50
 8003aa6:	d03c      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0xfa>
 8003aa8:	2b50      	cmp	r3, #80	; 0x50
 8003aaa:	d873      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d058      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0x13a>
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d86f      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab4:	2b30      	cmp	r3, #48	; 0x30
 8003ab6:	d064      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ab8:	2b30      	cmp	r3, #48	; 0x30
 8003aba:	d86b      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d060      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d867      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d05c      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d05a      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x15a>
 8003acc:	e062      	b.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6899      	ldr	r1, [r3, #8]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f000 fc87 	bl	80043f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003af0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	609a      	str	r2, [r3, #8]
      break;
 8003afa:	e04f      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6899      	ldr	r1, [r3, #8]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f000 fc70 	bl	80043f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b1e:	609a      	str	r2, [r3, #8]
      break;
 8003b20:	e03c      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	6859      	ldr	r1, [r3, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f000 fb2e 	bl	8004190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2150      	movs	r1, #80	; 0x50
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fc3d 	bl	80043ba <TIM_ITRx_SetConfig>
      break;
 8003b40:	e02c      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6859      	ldr	r1, [r3, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f000 fb8a 	bl	8004268 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2160      	movs	r1, #96	; 0x60
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fc2d 	bl	80043ba <TIM_ITRx_SetConfig>
      break;
 8003b60:	e01c      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6859      	ldr	r1, [r3, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f000 fb0e 	bl	8004190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2140      	movs	r1, #64	; 0x40
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fc1d 	bl	80043ba <TIM_ITRx_SetConfig>
      break;
 8003b80:	e00c      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f000 fc14 	bl	80043ba <TIM_ITRx_SetConfig>
      break;
 8003b92:	e003      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      break;
 8003b98:	e000      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a40      	ldr	r2, [pc, #256]	; (8003d1c <TIM_Base_SetConfig+0x114>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d013      	beq.n	8003c48 <TIM_Base_SetConfig+0x40>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c26:	d00f      	beq.n	8003c48 <TIM_Base_SetConfig+0x40>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a3d      	ldr	r2, [pc, #244]	; (8003d20 <TIM_Base_SetConfig+0x118>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00b      	beq.n	8003c48 <TIM_Base_SetConfig+0x40>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a3c      	ldr	r2, [pc, #240]	; (8003d24 <TIM_Base_SetConfig+0x11c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d007      	beq.n	8003c48 <TIM_Base_SetConfig+0x40>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a3b      	ldr	r2, [pc, #236]	; (8003d28 <TIM_Base_SetConfig+0x120>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d003      	beq.n	8003c48 <TIM_Base_SetConfig+0x40>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a3a      	ldr	r2, [pc, #232]	; (8003d2c <TIM_Base_SetConfig+0x124>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d108      	bne.n	8003c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a2f      	ldr	r2, [pc, #188]	; (8003d1c <TIM_Base_SetConfig+0x114>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d02b      	beq.n	8003cba <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c68:	d027      	beq.n	8003cba <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a2c      	ldr	r2, [pc, #176]	; (8003d20 <TIM_Base_SetConfig+0x118>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d023      	beq.n	8003cba <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a2b      	ldr	r2, [pc, #172]	; (8003d24 <TIM_Base_SetConfig+0x11c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01f      	beq.n	8003cba <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a2a      	ldr	r2, [pc, #168]	; (8003d28 <TIM_Base_SetConfig+0x120>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01b      	beq.n	8003cba <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a29      	ldr	r2, [pc, #164]	; (8003d2c <TIM_Base_SetConfig+0x124>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d017      	beq.n	8003cba <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a28      	ldr	r2, [pc, #160]	; (8003d30 <TIM_Base_SetConfig+0x128>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a27      	ldr	r2, [pc, #156]	; (8003d34 <TIM_Base_SetConfig+0x12c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00f      	beq.n	8003cba <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a26      	ldr	r2, [pc, #152]	; (8003d38 <TIM_Base_SetConfig+0x130>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00b      	beq.n	8003cba <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a25      	ldr	r2, [pc, #148]	; (8003d3c <TIM_Base_SetConfig+0x134>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <TIM_Base_SetConfig+0xb2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a24      	ldr	r2, [pc, #144]	; (8003d40 <TIM_Base_SetConfig+0x138>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a23      	ldr	r2, [pc, #140]	; (8003d44 <TIM_Base_SetConfig+0x13c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d108      	bne.n	8003ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <TIM_Base_SetConfig+0x114>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_Base_SetConfig+0xf8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a0c      	ldr	r2, [pc, #48]	; (8003d2c <TIM_Base_SetConfig+0x124>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d103      	bne.n	8003d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	615a      	str	r2, [r3, #20]
}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	40000400 	.word	0x40000400
 8003d24:	40000800 	.word	0x40000800
 8003d28:	40000c00 	.word	0x40000c00
 8003d2c:	40010400 	.word	0x40010400
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40014400 	.word	0x40014400
 8003d38:	40014800 	.word	0x40014800
 8003d3c:	40001800 	.word	0x40001800
 8003d40:	40001c00 	.word	0x40001c00
 8003d44:	40002000 	.word	0x40002000

08003d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f023 0201 	bic.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f023 0302 	bic.w	r3, r3, #2
 8003d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a20      	ldr	r2, [pc, #128]	; (8003e20 <TIM_OC1_SetConfig+0xd8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_OC1_SetConfig+0x64>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <TIM_OC1_SetConfig+0xdc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d10c      	bne.n	8003dc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f023 0308 	bic.w	r3, r3, #8
 8003db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <TIM_OC1_SetConfig+0xd8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <TIM_OC1_SetConfig+0x8e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <TIM_OC1_SetConfig+0xdc>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d111      	bne.n	8003dfa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	621a      	str	r2, [r3, #32]
}
 8003e14:	bf00      	nop
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	40010000 	.word	0x40010000
 8003e24:	40010400 	.word	0x40010400

08003e28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f023 0210 	bic.w	r2, r3, #16
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0320 	bic.w	r3, r3, #32
 8003e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <TIM_OC2_SetConfig+0xe4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_OC2_SetConfig+0x68>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a21      	ldr	r2, [pc, #132]	; (8003f10 <TIM_OC2_SetConfig+0xe8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10d      	bne.n	8003eac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <TIM_OC2_SetConfig+0xe4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_OC2_SetConfig+0x94>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <TIM_OC2_SetConfig+0xe8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d113      	bne.n	8003ee4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	621a      	str	r2, [r3, #32]
}
 8003efe:	bf00      	nop
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40010000 	.word	0x40010000
 8003f10:	40010400 	.word	0x40010400

08003f14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0303 	bic.w	r3, r3, #3
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a21      	ldr	r2, [pc, #132]	; (8003ff4 <TIM_OC3_SetConfig+0xe0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <TIM_OC3_SetConfig+0x66>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a20      	ldr	r2, [pc, #128]	; (8003ff8 <TIM_OC3_SetConfig+0xe4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d10d      	bne.n	8003f96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a16      	ldr	r2, [pc, #88]	; (8003ff4 <TIM_OC3_SetConfig+0xe0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d003      	beq.n	8003fa6 <TIM_OC3_SetConfig+0x92>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <TIM_OC3_SetConfig+0xe4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d113      	bne.n	8003fce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	621a      	str	r2, [r3, #32]
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40010400 	.word	0x40010400

08003ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	031b      	lsls	r3, r3, #12
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a12      	ldr	r2, [pc, #72]	; (80040a0 <TIM_OC4_SetConfig+0xa4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <TIM_OC4_SetConfig+0x68>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a11      	ldr	r2, [pc, #68]	; (80040a4 <TIM_OC4_SetConfig+0xa8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d109      	bne.n	8004078 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800406a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40010400 	.word	0x40010400

080040a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0201 	bic.w	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a28      	ldr	r2, [pc, #160]	; (8004174 <TIM_TI1_SetConfig+0xcc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d01b      	beq.n	800410e <TIM_TI1_SetConfig+0x66>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040dc:	d017      	beq.n	800410e <TIM_TI1_SetConfig+0x66>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4a25      	ldr	r2, [pc, #148]	; (8004178 <TIM_TI1_SetConfig+0xd0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <TIM_TI1_SetConfig+0x66>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a24      	ldr	r2, [pc, #144]	; (800417c <TIM_TI1_SetConfig+0xd4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00f      	beq.n	800410e <TIM_TI1_SetConfig+0x66>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a23      	ldr	r2, [pc, #140]	; (8004180 <TIM_TI1_SetConfig+0xd8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00b      	beq.n	800410e <TIM_TI1_SetConfig+0x66>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a22      	ldr	r2, [pc, #136]	; (8004184 <TIM_TI1_SetConfig+0xdc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <TIM_TI1_SetConfig+0x66>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4a21      	ldr	r2, [pc, #132]	; (8004188 <TIM_TI1_SetConfig+0xe0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_TI1_SetConfig+0x66>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4a20      	ldr	r2, [pc, #128]	; (800418c <TIM_TI1_SetConfig+0xe4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <TIM_TI1_SetConfig+0x6a>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <TIM_TI1_SetConfig+0x6c>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0303 	bic.w	r3, r3, #3
 800411e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	e003      	b.n	8004132 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	b2db      	uxtb	r3, r3
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f023 030a 	bic.w	r3, r3, #10
 800414c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f003 030a 	and.w	r3, r3, #10
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40010000 	.word	0x40010000
 8004178:	40000400 	.word	0x40000400
 800417c:	40000800 	.word	0x40000800
 8004180:	40000c00 	.word	0x40000c00
 8004184:	40010400 	.word	0x40010400
 8004188:	40014000 	.word	0x40014000
 800418c:	40001800 	.word	0x40001800

08004190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f023 0201 	bic.w	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f023 030a 	bic.w	r3, r3, #10
 80041cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f023 0210 	bic.w	r2, r3, #16
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800422c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	031b      	lsls	r3, r3, #12
 8004232:	b29b      	uxth	r3, r3
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004240:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	621a      	str	r2, [r3, #32]
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f023 0210 	bic.w	r2, r3, #16
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004292:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	031b      	lsls	r3, r3, #12
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	621a      	str	r2, [r3, #32]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f023 0303 	bic.w	r3, r3, #3
 80042f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004304:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	b2db      	uxtb	r3, r3
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004318:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	621a      	str	r2, [r3, #32]
}
 8004334:	bf00      	nop
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800437e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	031b      	lsls	r3, r3, #12
 8004384:	b29b      	uxth	r3, r3
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004392:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	031b      	lsls	r3, r3, #12
 8004398:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b085      	sub	sp, #20
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f043 0307 	orr.w	r3, r3, #7
 80043dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	609a      	str	r2, [r3, #8]
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800440a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	021a      	lsls	r2, r3, #8
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	431a      	orrs	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4313      	orrs	r3, r2
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	609a      	str	r2, [r3, #8]
}
 8004424:	bf00      	nop
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	2201      	movs	r2, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a1a      	ldr	r2, [r3, #32]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	43db      	mvns	r3, r3
 8004452:	401a      	ands	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	fa01 f303 	lsl.w	r3, r1, r3
 8004468:	431a      	orrs	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004490:	2302      	movs	r3, #2
 8004492:	e05a      	b.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a21      	ldr	r2, [pc, #132]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d022      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e0:	d01d      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1d      	ldr	r2, [pc, #116]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d018      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1a      	ldr	r2, [pc, #104]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00e      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a18      	ldr	r2, [pc, #96]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d009      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a17      	ldr	r2, [pc, #92]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a15      	ldr	r2, [pc, #84]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10c      	bne.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	4313      	orrs	r3, r2
 800452e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40010000 	.word	0x40010000
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40000c00 	.word	0x40000c00
 8004568:	40010400 	.word	0x40010400
 800456c:	40014000 	.word	0x40014000
 8004570:	40001800 	.word	0x40001800

08004574 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800458c:	2302      	movs	r3, #2
 800458e:	e03d      	b.n	800460c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e03f      	b.n	80046d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc fb58 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	; 0x24
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 ff9b 	bl	80055c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695a      	ldr	r2, [r3, #20]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b08a      	sub	sp, #40	; 0x28
 80046de:	af02      	add	r7, sp, #8
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d17c      	bne.n	80047f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <HAL_UART_Transmit+0x2c>
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e075      	b.n	80047f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_UART_Transmit+0x3e>
 8004714:	2302      	movs	r3, #2
 8004716:	e06e      	b.n	80047f6 <HAL_UART_Transmit+0x11c>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2221      	movs	r2, #33	; 0x21
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800472e:	f7fc ff95 	bl	800165c <HAL_GetTick>
 8004732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	88fa      	ldrh	r2, [r7, #6]
 800473e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004748:	d108      	bne.n	800475c <HAL_UART_Transmit+0x82>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d104      	bne.n	800475c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	e003      	b.n	8004764 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004760:	2300      	movs	r3, #0
 8004762:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800476c:	e02a      	b.n	80047c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2200      	movs	r2, #0
 8004776:	2180      	movs	r1, #128	; 0x80
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 fc53 	bl	8005024 <UART_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e036      	b.n	80047f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10b      	bne.n	80047a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800479c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	3302      	adds	r3, #2
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	e007      	b.n	80047b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	781a      	ldrb	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	3301      	adds	r3, #1
 80047b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1cf      	bne.n	800476e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2140      	movs	r1, #64	; 0x40
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fc23 	bl	8005024 <UART_WaitOnFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e006      	b.n	80047f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	e000      	b.n	80047f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
  }
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3720      	adds	r7, #32
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b08c      	sub	sp, #48	; 0x30
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	4613      	mov	r3, r2
 800480a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b20      	cmp	r3, #32
 8004816:	d152      	bne.n	80048be <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e04b      	b.n	80048c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004832:	2302      	movs	r3, #2
 8004834:	e044      	b.n	80048c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	461a      	mov	r2, r3
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 fc58 	bl	8005100 <UART_Start_Receive_DMA>
 8004850:	4603      	mov	r3, r0
 8004852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800485a:	2b00      	cmp	r3, #0
 800485c:	d12c      	bne.n	80048b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	2b01      	cmp	r3, #1
 8004864:	d125      	bne.n	80048b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004866:	2300      	movs	r3, #0
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	617b      	str	r3, [r7, #20]
   return(result);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f043 0310 	orr.w	r3, r3, #16
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800489c:	627a      	str	r2, [r7, #36]	; 0x24
 800489e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6a39      	ldr	r1, [r7, #32]
 80048a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e5      	bne.n	800487c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80048b0:	e002      	b.n	80048b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80048b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048bc:	e000      	b.n	80048c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80048be:	2302      	movs	r3, #2
  }
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3730      	adds	r7, #48	; 0x30
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b0ba      	sub	sp, #232	; 0xe8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10f      	bne.n	800492e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800490e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <HAL_UART_IRQHandler+0x66>
 800491a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fd8f 	bl	800544a <UART_Receive_IT>
      return;
 800492c:	e256      	b.n	8004ddc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800492e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80de 	beq.w	8004af4 <HAL_UART_IRQHandler+0x22c>
 8004938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004948:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80d1 	beq.w	8004af4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_UART_IRQHandler+0xae>
 800495e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f043 0201 	orr.w	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_UART_IRQHandler+0xd2>
 8004982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f043 0202 	orr.w	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800499a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00b      	beq.n	80049be <HAL_UART_IRQHandler+0xf6>
 80049a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f043 0204 	orr.w	r2, r3, #4
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d011      	beq.n	80049ee <HAL_UART_IRQHandler+0x126>
 80049ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d105      	bne.n	80049e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f043 0208 	orr.w	r2, r3, #8
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 81ed 	beq.w	8004dd2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_UART_IRQHandler+0x14e>
 8004a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fd1a 	bl	800544a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <HAL_UART_IRQHandler+0x17a>
 8004a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d04f      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fc22 	bl	800528c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	d141      	bne.n	8004ada <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3314      	adds	r3, #20
 8004a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3314      	adds	r3, #20
 8004a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1d9      	bne.n	8004a56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d013      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	4a7d      	ldr	r2, [pc, #500]	; (8004ca4 <HAL_UART_IRQHandler+0x3dc>)
 8004ab0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fd f864 	bl	8001b84 <HAL_DMA_Abort_IT>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d016      	beq.n	8004af0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004acc:	4610      	mov	r0, r2
 8004ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad0:	e00e      	b.n	8004af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f9a4 	bl	8004e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad8:	e00a      	b.n	8004af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f9a0 	bl	8004e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	e006      	b.n	8004af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f99c 	bl	8004e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004aee:	e170      	b.n	8004dd2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	bf00      	nop
    return;
 8004af2:	e16e      	b.n	8004dd2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	f040 814a 	bne.w	8004d92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8143 	beq.w	8004d92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 813c 	beq.w	8004d92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	f040 80b4 	bne.w	8004ca8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8140 	beq.w	8004dd6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	f080 8139 	bcs.w	8004dd6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b76:	f000 8088 	beq.w	8004c8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	330c      	adds	r3, #12
 8004b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ba6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004baa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1d9      	bne.n	8004b7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3314      	adds	r3, #20
 8004bcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e1      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3314      	adds	r3, #20
 8004c08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3314      	adds	r3, #20
 8004c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e3      	bne.n	8004c02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c5a:	f023 0310 	bic.w	r3, r3, #16
 8004c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	330c      	adds	r3, #12
 8004c68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e3      	bne.n	8004c48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fc ff0d 	bl	8001aa4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	4619      	mov	r1, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fb fc42 	bl	8000524 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ca0:	e099      	b.n	8004dd6 <HAL_UART_IRQHandler+0x50e>
 8004ca2:	bf00      	nop
 8004ca4:	08005353 	.word	0x08005353
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 808b 	beq.w	8004dda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8086 	beq.w	8004dda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cf2:	647a      	str	r2, [r7, #68]	; 0x44
 8004cf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e3      	bne.n	8004cce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3314      	adds	r3, #20
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	623b      	str	r3, [r7, #32]
   return(result);
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3314      	adds	r3, #20
 8004d26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d2a:	633a      	str	r2, [r7, #48]	; 0x30
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e3      	bne.n	8004d06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	e853 3f00 	ldrex	r3, [r3]
 8004d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0310 	bic.w	r3, r3, #16
 8004d62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d70:	61fa      	str	r2, [r7, #28]
 8004d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	69b9      	ldr	r1, [r7, #24]
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e3      	bne.n	8004d4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fb fbca 	bl	8000524 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d90:	e023      	b.n	8004dda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_UART_IRQHandler+0x4ea>
 8004d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fae5 	bl	800537a <UART_Transmit_IT>
    return;
 8004db0:	e014      	b.n	8004ddc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00e      	beq.n	8004ddc <HAL_UART_IRQHandler+0x514>
 8004dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fb25 	bl	800541a <UART_EndTransmit_IT>
    return;
 8004dd0:	e004      	b.n	8004ddc <HAL_UART_IRQHandler+0x514>
    return;
 8004dd2:	bf00      	nop
 8004dd4:	e002      	b.n	8004ddc <HAL_UART_IRQHandler+0x514>
      return;
 8004dd6:	bf00      	nop
 8004dd8:	e000      	b.n	8004ddc <HAL_UART_IRQHandler+0x514>
      return;
 8004dda:	bf00      	nop
  }
}
 8004ddc:	37e8      	adds	r7, #232	; 0xe8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop

08004de4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b09c      	sub	sp, #112	; 0x70
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d172      	bne.n	8004f36 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e52:	2200      	movs	r2, #0
 8004e54:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e76:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e78:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e5      	bne.n	8004e56 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3314      	adds	r3, #20
 8004e90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004eaa:	647a      	str	r2, [r7, #68]	; 0x44
 8004eac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e5      	bne.n	8004e8a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3314      	adds	r3, #20
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3314      	adds	r3, #20
 8004edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ede:	633a      	str	r2, [r7, #48]	; 0x30
 8004ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d119      	bne.n	8004f36 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f023 0310 	bic.w	r3, r3, #16
 8004f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	330c      	adds	r3, #12
 8004f20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f22:	61fa      	str	r2, [r7, #28]
 8004f24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	69b9      	ldr	r1, [r7, #24]
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e5      	bne.n	8004f02 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d106      	bne.n	8004f4c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f42:	4619      	mov	r1, r3
 8004f44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f46:	f7fb faed 	bl	8000524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f4a:	e002      	b.n	8004f52 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004f4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f4e:	f7ff ff53 	bl	8004df8 <HAL_UART_RxCpltCallback>
}
 8004f52:	bf00      	nop
 8004f54:	3770      	adds	r7, #112	; 0x70
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d108      	bne.n	8004f82 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	4619      	mov	r1, r3
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7fb fad2 	bl	8000524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f80:	e002      	b.n	8004f88 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff ff42 	bl	8004e0c <HAL_UART_RxHalfCpltCallback>
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b80      	cmp	r3, #128	; 0x80
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b21      	cmp	r3, #33	; 0x21
 8004fc2:	d108      	bne.n	8004fd6 <UART_DMAError+0x46>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004fd0:	68b8      	ldr	r0, [r7, #8]
 8004fd2:	f000 f933 	bl	800523c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b22      	cmp	r3, #34	; 0x22
 8004ff6:	d108      	bne.n	800500a <UART_DMAError+0x7a>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2200      	movs	r2, #0
 8005002:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005004:	68b8      	ldr	r0, [r7, #8]
 8005006:	f000 f941 	bl	800528c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f043 0210 	orr.w	r2, r3, #16
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005016:	68b8      	ldr	r0, [r7, #8]
 8005018:	f7ff ff02 	bl	8004e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800501c:	bf00      	nop
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b090      	sub	sp, #64	; 0x40
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005034:	e050      	b.n	80050d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d04c      	beq.n	80050d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800503e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <UART_WaitOnFlagUntilTimeout+0x30>
 8005044:	f7fc fb0a 	bl	800165c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005050:	429a      	cmp	r2, r3
 8005052:	d241      	bcs.n	80050d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800506a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005074:	637a      	str	r2, [r7, #52]	; 0x34
 8005076:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800507a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e5      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3314      	adds	r3, #20
 800508e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	613b      	str	r3, [r7, #16]
   return(result);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f023 0301 	bic.w	r3, r3, #1
 800509e:	63bb      	str	r3, [r7, #56]	; 0x38
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3314      	adds	r3, #20
 80050a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050a8:	623a      	str	r2, [r7, #32]
 80050aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	69f9      	ldr	r1, [r7, #28]
 80050ae:	6a3a      	ldr	r2, [r7, #32]
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e5      	bne.n	8005088 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e00f      	b.n	80050f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4013      	ands	r3, r2
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d09f      	beq.n	8005036 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3740      	adds	r7, #64	; 0x40
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b098      	sub	sp, #96	; 0x60
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	4613      	mov	r3, r2
 800510c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	88fa      	ldrh	r2, [r7, #6]
 8005118:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2222      	movs	r2, #34	; 0x22
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	4a40      	ldr	r2, [pc, #256]	; (8005230 <UART_Start_Receive_DMA+0x130>)
 800512e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	4a3f      	ldr	r2, [pc, #252]	; (8005234 <UART_Start_Receive_DMA+0x134>)
 8005136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	4a3e      	ldr	r2, [pc, #248]	; (8005238 <UART_Start_Receive_DMA+0x138>)
 800513e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	2200      	movs	r2, #0
 8005146:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005148:	f107 0308 	add.w	r3, r7, #8
 800514c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	f7fc fc48 	bl	80019f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005164:	2300      	movs	r3, #0
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d019      	beq.n	80051be <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	330c      	adds	r3, #12
 8005190:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800519a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800519c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	330c      	adds	r3, #12
 80051a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80051ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80051b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80051b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e5      	bne.n	800518a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3314      	adds	r3, #20
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	657b      	str	r3, [r7, #84]	; 0x54
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3314      	adds	r3, #20
 80051dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051de:	63ba      	str	r2, [r7, #56]	; 0x38
 80051e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e5      	bne.n	80051be <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3314      	adds	r3, #20
 80051f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	e853 3f00 	ldrex	r3, [r3]
 8005200:	617b      	str	r3, [r7, #20]
   return(result);
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005208:	653b      	str	r3, [r7, #80]	; 0x50
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3314      	adds	r3, #20
 8005210:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005212:	627a      	str	r2, [r7, #36]	; 0x24
 8005214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	6a39      	ldr	r1, [r7, #32]
 8005218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e5      	bne.n	80051f2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3760      	adds	r7, #96	; 0x60
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	08004e35 	.word	0x08004e35
 8005234:	08004f5b 	.word	0x08004f5b
 8005238:	08004f91 	.word	0x08004f91

0800523c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b089      	sub	sp, #36	; 0x24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	60bb      	str	r3, [r7, #8]
   return(result);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	61ba      	str	r2, [r7, #24]
 8005266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	6979      	ldr	r1, [r7, #20]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	613b      	str	r3, [r7, #16]
   return(result);
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e5      	bne.n	8005244 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005280:	bf00      	nop
 8005282:	3724      	adds	r7, #36	; 0x24
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800528c:	b480      	push	{r7}
 800528e:	b095      	sub	sp, #84	; 0x54
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	330c      	adds	r3, #12
 800529a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	330c      	adds	r3, #12
 80052b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052b4:	643a      	str	r2, [r7, #64]	; 0x40
 80052b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e5      	bne.n	8005294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3314      	adds	r3, #20
 80052ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f023 0301 	bic.w	r3, r3, #1
 80052de:	64bb      	str	r3, [r7, #72]	; 0x48
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3314      	adds	r3, #20
 80052e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	2b01      	cmp	r3, #1
 8005302:	d119      	bne.n	8005338 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	330c      	adds	r3, #12
 800530a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	60bb      	str	r3, [r7, #8]
   return(result);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f023 0310 	bic.w	r3, r3, #16
 800531a:	647b      	str	r3, [r7, #68]	; 0x44
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	330c      	adds	r3, #12
 8005322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005324:	61ba      	str	r2, [r7, #24]
 8005326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	6979      	ldr	r1, [r7, #20]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	e841 2300 	strex	r3, r2, [r1]
 8005330:	613b      	str	r3, [r7, #16]
   return(result);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1e5      	bne.n	8005304 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005346:	bf00      	nop
 8005348:	3754      	adds	r7, #84	; 0x54
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff fd57 	bl	8004e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005372:	bf00      	nop
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b21      	cmp	r3, #33	; 0x21
 800538c:	d13e      	bne.n	800540c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005396:	d114      	bne.n	80053c2 <UART_Transmit_IT+0x48>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d110      	bne.n	80053c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	1c9a      	adds	r2, r3, #2
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	621a      	str	r2, [r3, #32]
 80053c0:	e008      	b.n	80053d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	1c59      	adds	r1, r3, #1
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6211      	str	r1, [r2, #32]
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29b      	uxth	r3, r3
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	4619      	mov	r1, r3
 80053e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10f      	bne.n	8005408 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005406:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	e000      	b.n	800540e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800540c:	2302      	movs	r3, #2
  }
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005430:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fcd2 	bl	8004de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b08c      	sub	sp, #48	; 0x30
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b22      	cmp	r3, #34	; 0x22
 800545c:	f040 80ab 	bne.w	80055b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005468:	d117      	bne.n	800549a <UART_Receive_IT+0x50>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d113      	bne.n	800549a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005488:	b29a      	uxth	r2, r3
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	1c9a      	adds	r2, r3, #2
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	629a      	str	r2, [r3, #40]	; 0x28
 8005498:	e026      	b.n	80054e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ac:	d007      	beq.n	80054be <UART_Receive_IT+0x74>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10a      	bne.n	80054cc <UART_Receive_IT+0x82>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	e008      	b.n	80054de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	4619      	mov	r1, r3
 80054f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d15a      	bne.n	80055b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0220 	bic.w	r2, r2, #32
 800550a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800551a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695a      	ldr	r2, [r3, #20]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0201 	bic.w	r2, r2, #1
 800552a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	2b01      	cmp	r3, #1
 800553a:	d135      	bne.n	80055a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330c      	adds	r3, #12
 8005548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	613b      	str	r3, [r7, #16]
   return(result);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f023 0310 	bic.w	r3, r3, #16
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	330c      	adds	r3, #12
 8005560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005562:	623a      	str	r2, [r7, #32]
 8005564:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	69f9      	ldr	r1, [r7, #28]
 8005568:	6a3a      	ldr	r2, [r7, #32]
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e5      	bne.n	8005542 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	2b10      	cmp	r3, #16
 8005582:	d10a      	bne.n	800559a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800559e:	4619      	mov	r1, r3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fa ffbf 	bl	8000524 <HAL_UARTEx_RxEventCallback>
 80055a6:	e002      	b.n	80055ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff fc25 	bl	8004df8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e002      	b.n	80055b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	e000      	b.n	80055b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055b6:	2302      	movs	r3, #2
  }
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3730      	adds	r7, #48	; 0x30
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c4:	b0c0      	sub	sp, #256	; 0x100
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055dc:	68d9      	ldr	r1, [r3, #12]
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	ea40 0301 	orr.w	r3, r0, r1
 80055e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	431a      	orrs	r2, r3
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005618:	f021 010c 	bic.w	r1, r1, #12
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005626:	430b      	orrs	r3, r1
 8005628:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563a:	6999      	ldr	r1, [r3, #24]
 800563c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	ea40 0301 	orr.w	r3, r0, r1
 8005646:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4b8f      	ldr	r3, [pc, #572]	; (800588c <UART_SetConfig+0x2cc>)
 8005650:	429a      	cmp	r2, r3
 8005652:	d005      	beq.n	8005660 <UART_SetConfig+0xa0>
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	4b8d      	ldr	r3, [pc, #564]	; (8005890 <UART_SetConfig+0x2d0>)
 800565c:	429a      	cmp	r2, r3
 800565e:	d104      	bne.n	800566a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005660:	f7fd f838 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8005664:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005668:	e003      	b.n	8005672 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800566a:	f7fd f81f 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 800566e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800567c:	f040 810c 	bne.w	8005898 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005684:	2200      	movs	r2, #0
 8005686:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800568a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800568e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005692:	4622      	mov	r2, r4
 8005694:	462b      	mov	r3, r5
 8005696:	1891      	adds	r1, r2, r2
 8005698:	65b9      	str	r1, [r7, #88]	; 0x58
 800569a:	415b      	adcs	r3, r3
 800569c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800569e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056a2:	4621      	mov	r1, r4
 80056a4:	eb12 0801 	adds.w	r8, r2, r1
 80056a8:	4629      	mov	r1, r5
 80056aa:	eb43 0901 	adc.w	r9, r3, r1
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056c2:	4690      	mov	r8, r2
 80056c4:	4699      	mov	r9, r3
 80056c6:	4623      	mov	r3, r4
 80056c8:	eb18 0303 	adds.w	r3, r8, r3
 80056cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056d0:	462b      	mov	r3, r5
 80056d2:	eb49 0303 	adc.w	r3, r9, r3
 80056d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056ee:	460b      	mov	r3, r1
 80056f0:	18db      	adds	r3, r3, r3
 80056f2:	653b      	str	r3, [r7, #80]	; 0x50
 80056f4:	4613      	mov	r3, r2
 80056f6:	eb42 0303 	adc.w	r3, r2, r3
 80056fa:	657b      	str	r3, [r7, #84]	; 0x54
 80056fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005700:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005704:	f7fa fd7e 	bl	8000204 <__aeabi_uldivmod>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4b61      	ldr	r3, [pc, #388]	; (8005894 <UART_SetConfig+0x2d4>)
 800570e:	fba3 2302 	umull	r2, r3, r3, r2
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	011c      	lsls	r4, r3, #4
 8005716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800571a:	2200      	movs	r2, #0
 800571c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005720:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005724:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005728:	4642      	mov	r2, r8
 800572a:	464b      	mov	r3, r9
 800572c:	1891      	adds	r1, r2, r2
 800572e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005730:	415b      	adcs	r3, r3
 8005732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005734:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005738:	4641      	mov	r1, r8
 800573a:	eb12 0a01 	adds.w	sl, r2, r1
 800573e:	4649      	mov	r1, r9
 8005740:	eb43 0b01 	adc.w	fp, r3, r1
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005750:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005758:	4692      	mov	sl, r2
 800575a:	469b      	mov	fp, r3
 800575c:	4643      	mov	r3, r8
 800575e:	eb1a 0303 	adds.w	r3, sl, r3
 8005762:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005766:	464b      	mov	r3, r9
 8005768:	eb4b 0303 	adc.w	r3, fp, r3
 800576c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800577c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005780:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005784:	460b      	mov	r3, r1
 8005786:	18db      	adds	r3, r3, r3
 8005788:	643b      	str	r3, [r7, #64]	; 0x40
 800578a:	4613      	mov	r3, r2
 800578c:	eb42 0303 	adc.w	r3, r2, r3
 8005790:	647b      	str	r3, [r7, #68]	; 0x44
 8005792:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005796:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800579a:	f7fa fd33 	bl	8000204 <__aeabi_uldivmod>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	4611      	mov	r1, r2
 80057a4:	4b3b      	ldr	r3, [pc, #236]	; (8005894 <UART_SetConfig+0x2d4>)
 80057a6:	fba3 2301 	umull	r2, r3, r3, r1
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	2264      	movs	r2, #100	; 0x64
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
 80057b2:	1acb      	subs	r3, r1, r3
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057ba:	4b36      	ldr	r3, [pc, #216]	; (8005894 <UART_SetConfig+0x2d4>)
 80057bc:	fba3 2302 	umull	r2, r3, r3, r2
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057c8:	441c      	add	r4, r3
 80057ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057dc:	4642      	mov	r2, r8
 80057de:	464b      	mov	r3, r9
 80057e0:	1891      	adds	r1, r2, r2
 80057e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80057e4:	415b      	adcs	r3, r3
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057ec:	4641      	mov	r1, r8
 80057ee:	1851      	adds	r1, r2, r1
 80057f0:	6339      	str	r1, [r7, #48]	; 0x30
 80057f2:	4649      	mov	r1, r9
 80057f4:	414b      	adcs	r3, r1
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005804:	4659      	mov	r1, fp
 8005806:	00cb      	lsls	r3, r1, #3
 8005808:	4651      	mov	r1, sl
 800580a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800580e:	4651      	mov	r1, sl
 8005810:	00ca      	lsls	r2, r1, #3
 8005812:	4610      	mov	r0, r2
 8005814:	4619      	mov	r1, r3
 8005816:	4603      	mov	r3, r0
 8005818:	4642      	mov	r2, r8
 800581a:	189b      	adds	r3, r3, r2
 800581c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005820:	464b      	mov	r3, r9
 8005822:	460a      	mov	r2, r1
 8005824:	eb42 0303 	adc.w	r3, r2, r3
 8005828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005838:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800583c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005840:	460b      	mov	r3, r1
 8005842:	18db      	adds	r3, r3, r3
 8005844:	62bb      	str	r3, [r7, #40]	; 0x28
 8005846:	4613      	mov	r3, r2
 8005848:	eb42 0303 	adc.w	r3, r2, r3
 800584c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800584e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005852:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005856:	f7fa fcd5 	bl	8000204 <__aeabi_uldivmod>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <UART_SetConfig+0x2d4>)
 8005860:	fba3 1302 	umull	r1, r3, r3, r2
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	2164      	movs	r1, #100	; 0x64
 8005868:	fb01 f303 	mul.w	r3, r1, r3
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	3332      	adds	r3, #50	; 0x32
 8005872:	4a08      	ldr	r2, [pc, #32]	; (8005894 <UART_SetConfig+0x2d4>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	f003 0207 	and.w	r2, r3, #7
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4422      	add	r2, r4
 8005886:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005888:	e105      	b.n	8005a96 <UART_SetConfig+0x4d6>
 800588a:	bf00      	nop
 800588c:	40011000 	.word	0x40011000
 8005890:	40011400 	.word	0x40011400
 8005894:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800589c:	2200      	movs	r2, #0
 800589e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058aa:	4642      	mov	r2, r8
 80058ac:	464b      	mov	r3, r9
 80058ae:	1891      	adds	r1, r2, r2
 80058b0:	6239      	str	r1, [r7, #32]
 80058b2:	415b      	adcs	r3, r3
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
 80058b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ba:	4641      	mov	r1, r8
 80058bc:	1854      	adds	r4, r2, r1
 80058be:	4649      	mov	r1, r9
 80058c0:	eb43 0501 	adc.w	r5, r3, r1
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	00eb      	lsls	r3, r5, #3
 80058ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058d2:	00e2      	lsls	r2, r4, #3
 80058d4:	4614      	mov	r4, r2
 80058d6:	461d      	mov	r5, r3
 80058d8:	4643      	mov	r3, r8
 80058da:	18e3      	adds	r3, r4, r3
 80058dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058e0:	464b      	mov	r3, r9
 80058e2:	eb45 0303 	adc.w	r3, r5, r3
 80058e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005906:	4629      	mov	r1, r5
 8005908:	008b      	lsls	r3, r1, #2
 800590a:	4621      	mov	r1, r4
 800590c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005910:	4621      	mov	r1, r4
 8005912:	008a      	lsls	r2, r1, #2
 8005914:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005918:	f7fa fc74 	bl	8000204 <__aeabi_uldivmod>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4b60      	ldr	r3, [pc, #384]	; (8005aa4 <UART_SetConfig+0x4e4>)
 8005922:	fba3 2302 	umull	r2, r3, r3, r2
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	011c      	lsls	r4, r3, #4
 800592a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800592e:	2200      	movs	r2, #0
 8005930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005934:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005938:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	1891      	adds	r1, r2, r2
 8005942:	61b9      	str	r1, [r7, #24]
 8005944:	415b      	adcs	r3, r3
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800594c:	4641      	mov	r1, r8
 800594e:	1851      	adds	r1, r2, r1
 8005950:	6139      	str	r1, [r7, #16]
 8005952:	4649      	mov	r1, r9
 8005954:	414b      	adcs	r3, r1
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005964:	4659      	mov	r1, fp
 8005966:	00cb      	lsls	r3, r1, #3
 8005968:	4651      	mov	r1, sl
 800596a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800596e:	4651      	mov	r1, sl
 8005970:	00ca      	lsls	r2, r1, #3
 8005972:	4610      	mov	r0, r2
 8005974:	4619      	mov	r1, r3
 8005976:	4603      	mov	r3, r0
 8005978:	4642      	mov	r2, r8
 800597a:	189b      	adds	r3, r3, r2
 800597c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005980:	464b      	mov	r3, r9
 8005982:	460a      	mov	r2, r1
 8005984:	eb42 0303 	adc.w	r3, r2, r3
 8005988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	67bb      	str	r3, [r7, #120]	; 0x78
 8005996:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059a4:	4649      	mov	r1, r9
 80059a6:	008b      	lsls	r3, r1, #2
 80059a8:	4641      	mov	r1, r8
 80059aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ae:	4641      	mov	r1, r8
 80059b0:	008a      	lsls	r2, r1, #2
 80059b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059b6:	f7fa fc25 	bl	8000204 <__aeabi_uldivmod>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4b39      	ldr	r3, [pc, #228]	; (8005aa4 <UART_SetConfig+0x4e4>)
 80059c0:	fba3 1302 	umull	r1, r3, r3, r2
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	2164      	movs	r1, #100	; 0x64
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	3332      	adds	r3, #50	; 0x32
 80059d2:	4a34      	ldr	r2, [pc, #208]	; (8005aa4 <UART_SetConfig+0x4e4>)
 80059d4:	fba2 2303 	umull	r2, r3, r2, r3
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059de:	441c      	add	r4, r3
 80059e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e4:	2200      	movs	r2, #0
 80059e6:	673b      	str	r3, [r7, #112]	; 0x70
 80059e8:	677a      	str	r2, [r7, #116]	; 0x74
 80059ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059ee:	4642      	mov	r2, r8
 80059f0:	464b      	mov	r3, r9
 80059f2:	1891      	adds	r1, r2, r2
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	415b      	adcs	r3, r3
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059fe:	4641      	mov	r1, r8
 8005a00:	1851      	adds	r1, r2, r1
 8005a02:	6039      	str	r1, [r7, #0]
 8005a04:	4649      	mov	r1, r9
 8005a06:	414b      	adcs	r3, r1
 8005a08:	607b      	str	r3, [r7, #4]
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a16:	4659      	mov	r1, fp
 8005a18:	00cb      	lsls	r3, r1, #3
 8005a1a:	4651      	mov	r1, sl
 8005a1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a20:	4651      	mov	r1, sl
 8005a22:	00ca      	lsls	r2, r1, #3
 8005a24:	4610      	mov	r0, r2
 8005a26:	4619      	mov	r1, r3
 8005a28:	4603      	mov	r3, r0
 8005a2a:	4642      	mov	r2, r8
 8005a2c:	189b      	adds	r3, r3, r2
 8005a2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a30:	464b      	mov	r3, r9
 8005a32:	460a      	mov	r2, r1
 8005a34:	eb42 0303 	adc.w	r3, r2, r3
 8005a38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	663b      	str	r3, [r7, #96]	; 0x60
 8005a44:	667a      	str	r2, [r7, #100]	; 0x64
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a52:	4649      	mov	r1, r9
 8005a54:	008b      	lsls	r3, r1, #2
 8005a56:	4641      	mov	r1, r8
 8005a58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	008a      	lsls	r2, r1, #2
 8005a60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a64:	f7fa fbce 	bl	8000204 <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <UART_SetConfig+0x4e4>)
 8005a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	2164      	movs	r1, #100	; 0x64
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	3332      	adds	r3, #50	; 0x32
 8005a80:	4a08      	ldr	r2, [pc, #32]	; (8005aa4 <UART_SetConfig+0x4e4>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	f003 020f 	and.w	r2, r3, #15
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4422      	add	r2, r4
 8005a94:	609a      	str	r2, [r3, #8]
}
 8005a96:	bf00      	nop
 8005a98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa2:	bf00      	nop
 8005aa4:	51eb851f 	.word	0x51eb851f

08005aa8 <__libc_init_array>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4d0d      	ldr	r5, [pc, #52]	; (8005ae0 <__libc_init_array+0x38>)
 8005aac:	4c0d      	ldr	r4, [pc, #52]	; (8005ae4 <__libc_init_array+0x3c>)
 8005aae:	1b64      	subs	r4, r4, r5
 8005ab0:	10a4      	asrs	r4, r4, #2
 8005ab2:	2600      	movs	r6, #0
 8005ab4:	42a6      	cmp	r6, r4
 8005ab6:	d109      	bne.n	8005acc <__libc_init_array+0x24>
 8005ab8:	4d0b      	ldr	r5, [pc, #44]	; (8005ae8 <__libc_init_array+0x40>)
 8005aba:	4c0c      	ldr	r4, [pc, #48]	; (8005aec <__libc_init_array+0x44>)
 8005abc:	f000 f820 	bl	8005b00 <_init>
 8005ac0:	1b64      	subs	r4, r4, r5
 8005ac2:	10a4      	asrs	r4, r4, #2
 8005ac4:	2600      	movs	r6, #0
 8005ac6:	42a6      	cmp	r6, r4
 8005ac8:	d105      	bne.n	8005ad6 <__libc_init_array+0x2e>
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad0:	4798      	blx	r3
 8005ad2:	3601      	adds	r6, #1
 8005ad4:	e7ee      	b.n	8005ab4 <__libc_init_array+0xc>
 8005ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ada:	4798      	blx	r3
 8005adc:	3601      	adds	r6, #1
 8005ade:	e7f2      	b.n	8005ac6 <__libc_init_array+0x1e>
 8005ae0:	08005b40 	.word	0x08005b40
 8005ae4:	08005b40 	.word	0x08005b40
 8005ae8:	08005b40 	.word	0x08005b40
 8005aec:	08005b44 	.word	0x08005b44

08005af0 <memset>:
 8005af0:	4402      	add	r2, r0
 8005af2:	4603      	mov	r3, r0
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d100      	bne.n	8005afa <memset+0xa>
 8005af8:	4770      	bx	lr
 8005afa:	f803 1b01 	strb.w	r1, [r3], #1
 8005afe:	e7f9      	b.n	8005af4 <memset+0x4>

08005b00 <_init>:
 8005b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b02:	bf00      	nop
 8005b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b06:	bc08      	pop	{r3}
 8005b08:	469e      	mov	lr, r3
 8005b0a:	4770      	bx	lr

08005b0c <_fini>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	bf00      	nop
 8005b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b12:	bc08      	pop	{r3}
 8005b14:	469e      	mov	lr, r3
 8005b16:	4770      	bx	lr
